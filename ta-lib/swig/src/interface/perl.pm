# This perl snippet is appended to the perl module generated by SWIG

package Finance::TA::TA_History;

# Wrapper classes arrange access to TA_History members but creation/deletion
# should be done differently.  Instead of doing new_ and delete_ (which
# use malloc/free), TA_HistoryAlloc and TA_HistoryFree has to be used.

sub new {
    #print "alloc history: @_\n";
    my $pkg = shift;
    my $self;
    # handle default parameters
    $_[6] = $Finance::TA::TA_ALL if (@_ < 7) || !defined($_[6]);
    my @res = Finance::TAc::TA_HistoryAlloc(@_);
    if($res[0] == $Finance::TA::TA_SUCCESS && defined($res[1])) {
        $self = $res[1];
        bless $self, $pkg;
        return $self;
    } else {
        my %hash;
        $hash{retCode} = $res[0];
        return \%hash;
    }
}

*swig_retCode_get = sub { $Finance::TA::TA_SUCCESS };

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
		#print "free history: @_: ";
        Finance::TAc::TA_HistoryFree($self);
        delete $OWNER{$self};
    }
}

# Now disallow direct calls to TA_HistoryAllow/TA_HistoryFree
delete $Finance::TA::{TA_HistoryAlloc};
delete $Finance::TA::{TA_HistoryFree};



package Finance::TA;


# SWIG does not export anything by default
# This small loop circumvents that and export everything beginning with 'TA_'
foreach (keys %Finance::TA::) {
    if (/^TA_/) {
        local *sym = $Finance::TA::{$_};        
        push(@EXPORT, "\$$_") if defined $sym;
        push(@EXPORT, "\@$_") if defined @sym;
        push(@EXPORT, "\%$_") if defined %sym;
        push(@EXPORT, $_) if defined &sym;
    }
}
1;
