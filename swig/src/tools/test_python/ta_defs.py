#!/usr/bin/python
"""
Simple test of Python wrapper to ta_defs
""" 

import sys
import unittest
sys.path.insert(0,'../../../lib/python')

from TaLib import *

print "TA-Lib ", TA_GetVersionString()
print "Testing ta_defs...";


class ta_defs_test(unittest.TestCase):

    def testConstants(self):
        print 'Testing Constants...'
        self.assert_( TA_INTEGER_MIN )
        self.assert_( TA_INTEGER_MAX )
        self.assertEqual( TA_REAL_MIN, -3e+37 )
        self.assertEqual( TA_REAL_MAX,  3e+37 )
        self.assertEqual( TA_INTEGER_DEFAULT, TA_INTEGER_MIN-1 )
        self.assertEqual( TA_REAL_DEFAULT, -4e+37 )

    def test_TA_RetCode(self):
        print 'Testing TA_RetCode...'
        self.assertEqual( TA_SUCCESS, 0 )
        self.assertEqual( TA_LIB_NOT_INITIALIZE, 1 )
        self.assertEqual( TA_BAD_PARAM, 2 )
        self.assertEqual( TA_ALLOC_ERR, 3 )
        self.assertEqual( TA_ACCESS_FAILED, 4 )
        self.assertEqual( TA_NO_DATA_SOURCE, 5 )
        self.assertEqual( TA_SYMBOL_NOT_FOUND, 6 )
        self.assertEqual( TA_CATEGORY_NOT_FOUND, 7 )
        self.assertEqual( TA_KEY_NOT_FOUND, 8 )
        self.assertEqual( TA_INDEX_FILE_NOT_ACCESSIBLE, 9 )
        self.assertEqual( TA_INDEX_NOT_VALID, 10 )
        self.assertEqual( TA_INVALID_FIELD, 11 )
        self.assertEqual( TA_INVALID_PATH, 12 )
        self.assertEqual( TA_INTERNAL_ERR, 13 )
        self.assertEqual( TA_FATAL_ERR, 14 )
        self.assertEqual( TA_NO_NEW_DATA, 15 )
        self.assertEqual( TA_NOT_SUPPORTED, 16 )
        self.assertEqual( TA_END_OF_INDEX, 17 )
        self.assertEqual( TA_ENOUGH_DATA, 18 )
        self.assertEqual( TA_MISSING_FIELD, 19 )
        self.assertEqual( TA_REDUNDANT_FIELD, 20 )
        self.assertEqual( TA_INVALID_DATE, 21 )
        self.assertEqual( TA_INVALID_PRICE, 22 )
        self.assertEqual( TA_GROUP_NOT_FOUND, 23 )
        self.assertEqual( TA_FUNC_NOT_FOUND, 24 )
        self.assertEqual( TA_INVALID_HANDLE, 25 )
        self.assertEqual( TA_INVALID_PARAM_HOLDER, 26 )
        self.assertEqual( TA_INVALID_PARAM_HOLDER_TYPE, 27 )
        self.assertEqual( TA_INVALID_PARAM_FUNCTION, 28 )
        self.assertEqual( TA_INPUT_NOT_ALL_INITIALIZE, 29 )
        self.assertEqual( TA_OUTPUT_NOT_ALL_INITIALIZE, 30 )
        self.assertEqual( TA_OUT_OF_RANGE_START_INDEX, 31 )
        self.assertEqual( TA_OUT_OF_RANGE_END_INDEX, 32 )
        self.assertEqual( TA_BAD_OBJECT, 33 )
        self.assertEqual( TA_MEM_LEAK, 34 )
        self.assertEqual( TA_ADDR_NOT_FOUND, 35 )
        self.assertEqual( TA_SOCKET_LIB_INIT_ERR, 36 )
        self.assertEqual( TA_END_OF_STREAM, 37 )
        self.assertEqual( TA_BAD_STREAM_CRC, 38 )
        self.assertEqual( TA_UNSUPPORTED_STREAM_VERSION, 39 )
        self.assertEqual( TA_BAD_STREAM_HEADER_CRC, 40 )
        self.assertEqual( TA_BAD_STREAM_HEADER, 41 )
        self.assertEqual( TA_BAD_STREAM_CONTENT, 42 )
        self.assertEqual( TA_BAD_YAHOO_IDX_HDR, 43 )
        self.assertEqual( TA_UNSUPORTED_YAHOO_IDX_VERSION, 44 )
        self.assertEqual( TA_BAD_YAHOO_IDX_INDICATOR_AF, 45 )
        self.assertEqual( TA_BAD_YAHOO_IDX_INDICATOR_EB, 46 )
        self.assertEqual( TA_BAD_YAHOO_IDX_INDICATOR_F2, 47 )
        self.assertEqual( TA_NO_INTERNET_CONNECTION, 48 )
        self.assertEqual( TA_INTERNET_ACCESS_FAILED, 49 )
        self.assertEqual( TA_INTERNET_OPEN_FAILED, 50 )
        self.assertEqual( TA_INTERNET_NOT_OPEN_TRY_AGAIN, 51 )
        self.assertEqual( TA_INTERNET_SERVER_CONNECT_FAILED, 52 )
        self.assertEqual( TA_INTERNET_OPEN_REQUEST_FAILED, 53 )
        self.assertEqual( TA_INTERNET_SEND_REQUEST_FAILED, 54 )
        self.assertEqual( TA_INTERNET_READ_DATA_FAILED, 55 )
        self.assertEqual( TA_UNSUPPORTED_COUNTRY, 56 )
        self.assertEqual( TA_BAD_HTML_SYNTAX, 57 )
        self.assertEqual( TA_PERIOD_NOT_AVAILABLE, 58 )
        self.assertEqual( TA_FINISH_TABLE, 59 )
        self.assertEqual( TA_INVALID_SECURITY_EXCHANGE, 60 )
        self.assertEqual( TA_INVALID_SECURITY_SYMBOL, 61 )
        self.assertEqual( TA_INVALID_SECURITY_COUNTRY, 62 )
        self.assertEqual( TA_INVALID_SECURITY_TYPE, 63 )
        self.assertEqual( TA_MISSING_DATE_OR_TIME_FIELD, 64 )
        self.assertEqual( TA_OBJECT_NOT_EQUAL, 65 )
        self.assertEqual( TA_INVALID_LIST_TYPE, 66 )
        self.assertEqual( TA_YAHOO_IDX_EXPIRED, 67 )
        self.assertEqual( TA_YAHOO_IDX_UNAVAILABLE_1, 68 )
        self.assertEqual( TA_YAHOO_IDX_FAILED, 69 )
        self.assertEqual( TA_LIBCURL_GLOBAL_INIT_FAILED, 70 )
        self.assertEqual( TA_LIBCURL_INIT_FAILED, 71 )
        self.assertEqual( TA_INSTRUMENT_ID_BAD, 72 )
        self.assertEqual( TA_TRADE_LOG_NOT_INITIALIZED, 73 )
        self.assertEqual( TA_BAD_TRADE_TYPE, 74 )
        self.assertEqual( TA_BAD_START_DATE, 75 )
        self.assertEqual( TA_BAD_END_DATE, 76 )
        self.assertEqual( TA_INTERNET_SET_RX_TIMEOUT_FAILED, 77 )
        self.assertEqual( TA_NO_TRADE_LOG, 78 )
        self.assertEqual( TA_ENTRY_TRANSACTION_MISSING, 79 )
        self.assertEqual( TA_INVALID_VALUE_ID, 80 )
        self.assertEqual( TA_BAD_STARTING_CAPITAL, 81 )
        self.assertEqual( TA_TRADELOG_ALREADY_ADDED, 82 )
        self.assertEqual( TA_YAHOO_IDX_UNAVAILABLE_2, 83 )
        self.assertEqual( TA_YAHOO_IDX_UNAVAILABLE_3, 84 )
        self.assertEqual( TA_NO_WEEKDAY_IN_DATE_RANGE, 85 )
        self.assertEqual( TA_VALUE_NOT_APPLICABLE, 86 )
        self.assertEqual( TA_DATA_GAP, 87 )
        self.assertEqual( TA_NOT_IMPLEMENTED, 88 )
        self.assertEqual( TA_PM_REFERENCE_EXIST, 89 )
        self.assertEqual( TA_PRICE_BAR_CONTAINS_ZERO, 90 )
        self.assertEqual( TA_MISSING_CLOSE_PRICE_FIELD, 91 )
        self.assertEqual( TA_UNSUPPORTED_REPLACE_ZERO_PRICE_BAR, 92 )
        self.assertEqual( TA_MISSING_INPUT_DIGITS, 93 )
        self.assertEqual( TA_DICT_TYPE_MISMATCH, 94 )
        self.assertEqual( TA_YAHOO_IDX_UNAVAILABLE_4, 95 )
        self.assertEqual( TA_OBSOLETED_SYMBOL, 96 )
        self.assertEqual( TA_BAD_QUERY, 97 )
        self.assertEqual( TA_UNSUPPORTED_DO_NOT_SPLIT_ADJUST, 98 )
        self.assertEqual( TA_UNSUPPORTED_DO_NOT_VALUE_ADJUST, 99 )
        self.assertEqual( TA_MISSING_PRICE_FOR_ADJUSTMENT, 100 )
        self.assertEqual( TA_INVALID_DATABASE_TYPE, 101 )
        self.assertEqual( TA_UNEXPECTED_SQL_TYPE, 102 )
        self.assertEqual( TA_UNEXPECTED_SQL_TYPE_FOR_OPEN, 103 )
        self.assertEqual( TA_UNEXPECTED_SQL_TYPE_FOR_HIGH, 104 )
        self.assertEqual( TA_UNEXPECTED_SQL_TYPE_FOR_LOW, 105 )
        self.assertEqual( TA_UNEXPECTED_SQL_TYPE_FOR_CLOSE, 106 )
        self.assertEqual( TA_UNEXPECTED_SQL_TYPE_FOR_VOLUME, 107 )
        self.assertEqual( TA_UNEXPECTED_SQL_TYPE_FOR_OI, 108 )
        self.assertEqual( TA_IP_NOSOCKETS, 700 )
        self.assertEqual( TA_IP_BADHOST, 701 )
        self.assertEqual( TA_IP_BADSERVICE, 702 )
        self.assertEqual( TA_IP_BADPROTOCOL, 703 )
        self.assertEqual( TA_IP_SOCKETERROR, 704 )
        self.assertEqual( TA_IP_CONNECTERROR, 705 )
        self.assertEqual( TA_IP_BINDERROR, 706 )
        self.assertEqual( TA_IP_LISTENERROR, 707 )
        self.assertEqual( TA_IP_WRITE_ERROR, 708 )
        self.assertEqual( TA_IP_READ_ERROR, 709 )
        self.assertEqual( TA_IP_UNKNOWN_ERR, 710 )
        self.assertEqual( TA_HTTP_NO_HEADER, 800 )
        self.assertEqual( TA_HTTP_SC_301, 801 )
        self.assertEqual( TA_HTTP_SC_302, 802 )
        self.assertEqual( TA_HTTP_SC_304, 803 )
        self.assertEqual( TA_HTTP_SC_400, 804 )
        self.assertEqual( TA_HTTP_SC_401, 805 )
        self.assertEqual( TA_HTTP_SC_403, 806 )
        self.assertEqual( TA_HTTP_SC_404, 807 )
        self.assertEqual( TA_HTTP_SC_500, 808 )
        self.assertEqual( TA_HTTP_SC_501, 809 )
        self.assertEqual( TA_HTTP_SC_502, 810 )
        self.assertEqual( TA_HTTP_SC_503, 811 )
        self.assertEqual( TA_HTTP_SC_UNKNOWN, 812 )
        self.assertEqual( TA_INTERNAL_ERROR, 5000 )
        self.assertEqual( TA_UNKNOWN_ERR, 0xFFFF )

    def test_TA_Compatibility(self):
        print "Testing TA_Compatibility..."
        self.assertEqual( TA_COMPATIBILITY_DEFAULT, 0 )
        self.assertEqual( TA_COMPATIBILITY_METASTOCK, 1 )

    def test_TA_MAType(self):
        print "Testing TA_MAType..."
        self.assertEqual( TA_MAType_SMA, 0 )
        self.assertEqual( TA_MAType_EMA, 1 )
        self.assertEqual( TA_MAType_WMA, 2 )
        self.assertEqual( TA_MAType_DEMA, 3 )
        self.assertEqual( TA_MAType_TEMA, 4 )
        self.assertEqual( TA_MAType_TRIMA, 5 )
        self.assertEqual( TA_MAType_KAMA, 6 )
        self.assertEqual( TA_MAType_MAMA, 7 )
        self.assertEqual( TA_MAType_T3, 8 )

    def test_TA_FuncUnstId(self):
        print "Testing TA_FuncUnstId..."
        self.assertEqual( TA_FUNC_UNST_EMA, 0 )
        self.assertEqual( TA_FUNC_UNST_HT_TRENDLINE, 1 )
        self.assertEqual( TA_FUNC_UNST_KAMA, 2 )
        self.assertEqual( TA_FUNC_UNST_MAMA, 3 )
        self.assertEqual( TA_FUNC_UNST_T3, 4 )
        self.assertEqual( TA_FUNC_UNST_ATR, 5 )
        self.assertEqual( TA_FUNC_UNST_ADX, 6 )
        self.assertEqual( TA_FUNC_UNST_ADXR, 7 )
        self.assertEqual( TA_FUNC_UNST_DX, 8 )
        self.assertEqual( TA_FUNC_UNST_MFI, 9 )
        self.assertEqual( TA_FUNC_UNST_MINUS_DI, 10 )
        self.assertEqual( TA_FUNC_UNST_MINUS_DM, 11 )
        self.assertEqual( TA_FUNC_UNST_PLUS_DI, 12 )
        self.assertEqual( TA_FUNC_UNST_PLUS_DM, 13 )
        self.assertEqual( TA_FUNC_UNST_RSI, 14 )
        self.assertEqual( TA_FUNC_UNST_STOCHRSI, 15 )
        self.assertEqual( TA_FUNC_UNST_HT_DCPERIOD, 16 )
        self.assertEqual( TA_FUNC_UNST_HT_DCPHASE, 17 )
        self.assertEqual( TA_FUNC_UNST_HT_PHASOR, 18 )
        self.assertEqual( TA_FUNC_UNST_HT_SINE, 19 )
        self.assertEqual( TA_FUNC_UNST_HT_TRENDMODE, 20 )
        self.assert_( TA_FUNC_UNST_ALL > 0 )
        self.assertEqual( TA_FUNC_UNST_NONE, -1 )


if __name__ == '__main__':
    unittest.main()
