#!perl
#
# Simple test of ta_defs and ta_common
# It uses the low-level access interface generated by SWIG
# It is straightforward, but quite verbose
# 

use lib "../../../lib/perl";
use Finance::TA();              # do not import any symbols

sub ps {  # probe scalar
    if (defined $_[0]) {
        $_[0];
    } else {
        "undef";
    }
}

sub ce { # check error
    my $rc = shift;
    if ( $rc != Finance::TA::TA_SUCCESS ) {
        $rci = new Finance::TA::TA_RetCodeInfo;
        Finance::TA::TA_SetRetCodeInfo($rc, $rci);
        print $rc, "(",
            $rci->{enumStr}, "): ",
            $rci->{infoStr}, "\n";
        exit(1);
    }
}


print "Tested with TA-Lib ver 0.1.2\n";

print "TA-Lib version number (string): ", 
    ps(Finance::TA::TA_GetVersionString()), 
    "\n";

print "TA-Lib version number (fields): ", 
    ps(Finance::TA::TA_GetVersionMajor()), ".", 
    ps(Finance::TA::TA_GetVersionMinor()), ".",
    ps(Finance::TA::TA_GetVersionBuild()), " (",
    ps(Finance::TA::TA_GetVersionDate()), " ",
    ps(Finance::TA::TA_GetVersionTime()), ")",
    "\n";
print "\n";

print "Constants from ta_defs.h:\n\n";

print "min/max values:\n";
print "TA_INTEGER_MIN: ", ps($Finance::TA::TA_INTEGER_MIN), "\n";
print "TA_INTEGER_MAX: ", ps($Finance::TA::TA_INTEGER_MAX), "\n";
print "TA_REAL_MIN: ", ps($Finance::TA::TA_REAL_MIN), "\n";
print "TA_REAL_MAX: ", ps($Finance::TA::TA_REAL_MAX), "\n";
print "TA_INTEGER_DEFAULT: ", ps($Finance::TA::TA_INTEGER_DEFAULT), "\n";
print "TA_REAL_DEFAULT: ", ps($Finance::TA::TA_REAL_DEFAULT), "\n";
print "\n";

print "TA_RetCode values:\n";
print "TA_SUCCESS: ", ps($Finance::TA::TA_SUCCESS), "\n";
print "TA_LIB_NOT_INITIALIZE: ", ps($Finance::TA::TA_LIB_NOT_INITIALIZE), "\n";
print "TA_BAD_PARAM: ", ps($Finance::TA::TA_BAD_PARAM), "\n";
print "TA_ALLOC_ERR: ", ps($Finance::TA::TA_ALLOC_ERR), "\n";
print "TA_ACCESS_FAILED: ", ps($Finance::TA::TA_ACCESS_FAILED), "\n";
print "etc...\n";
print "TA_INTERNAL_ERROR: ", ps($Finance::TA::TA_INTERNAL_ERROR), "\n";
print "TA_UNKNOWN_ERR: ", ps($Finance::TA::TA_UNKNOWN_ERR), "\n";
print "\n";

print "TA_Compatibility values:\n";
print "TA_COMPATIBILITY_DEFAULT: ", ps($Finance::TA::TA_COMPATIBILITY_DEFAULT), "\n";
print "TA_COMPATIBILITY_METASTOCK: ", ps($Finance::TA::TA_COMPATIBILITY_METASTOCK), "\n";
print "\n";

print "TA_MAType values:\n";
print "TA_MAType_SMA: ", ps($Finance::TA::TA_MAType_SMA), "\n";
print "TA_MAType_EMA: ", ps($Finance::TA::TA_MAType_EMA), "\n";
print "TA_MAType_WMA: ", ps($Finance::TA::TA_MAType_WMA), "\n";
print "etc...\n\n";

print "TA_FuncUnstId values:\n";
print "TA_FUNC_UNST_EMA: ", ps($Finance::TA::TA_FUNC_UNST_EMA), "\n";
print "TA_FUNC_UNST_HT_TRENDLINE: ", ps($Finance::TA::TA_FUNC_UNST_HT_TRENDLINE), "\n";
print "TA_FUNC_UNST_KAMA: ", ps($Finance::TA::TA_FUNC_UNST_KAMA), "\n";
print "TA_FUNC_UNST_MAMA: ", ps($Finance::TA::TA_FUNC_UNST_MAMA), "\n";
print "etc...\n";
print "TA_FUNC_UNST_ALL: ", ps($Finance::TA::TA_FUNC_UNST_ALL), "\n";
print "TA_FUNC_UNST_NONE ", ps($Finance::TA::TA_FUNC_UNST_NONE), "\n";
print "\n";

print "Constants from ta_common.h:\n\n";

print "TA_Period values (subset):\n";
print "TA_1SEC: ", ps($Finance::TA::TA_1SEC), "\n";
print "TA_1MIN: ", ps($Finance::TA::TA_1MIN), "\n";
print "TA_5MINS: ", ps($Finance::TA::TA_5MINS), "\n";
print "TA_10MINS: ", ps($Finance::TA::TA_10MINS), "\n";
print "TA_15MINS: ", ps($Finance::TA::TA_15MINS), "\n";
print "TA_30MINS: ", ps($Finance::TA::TA_30MINS), "\n";
print "TA_1HOUR: ", ps($Finance::TA::TA_1HOUR), "\n";
print "TA_DAILY: ", ps($Finance::TA::TA_DAILY), "\n";
print "TA_WEEKLY: ", ps($Finance::TA::TA_WEEKLY), "\n";
print "TA_MONTHLY: ", ps($Finance::TA::TA_MONTHLY), "\n";
print "TA_QUARTERLY: ", ps($Finance::TA::TA_QUARTERLY), "\n";
print "TA_YEARLY: ", ps($Finance::TA::TA_YEARLY), "\n";
print "\n";

print "Retrieve error code info (using low level interface):\n";
$rci = Finance::TAc::new_TA_RetCodeInfo();
for $rc (0 .. 30) {
    Finance::TAc::TA_SetRetCodeInfo($rc, $rci);
    print $rc, "(",
        Finance::TAc::TA_RetCodeInfo_enumStr_get($rci), "): ",
        Finance::TAc::TA_RetCodeInfo_infoStr_get($rci), "\n";
}
Finance::TAc::delete_TA_RetCodeInfo($rci);
print "etc...\n\n";

print "Retrieve error code info (using proxy classes):\n";
$rci = new Finance::TA::TA_RetCodeInfo;
for $rc (0 .. 30) {
    Finance::TA::TA_SetRetCodeInfo($rc, $rci);
    print $rc, "(",
        $rci->{enumStr}, "): ",
        $rci->{infoStr}, "\n";
}
$rci->DESTROY;  # optional
print "etc...\n\n";

print "TA_Initialize()\n";
$ret = Finance::TA::TA_Initialize(undef);
ce($ret);

print "TA_Shutdown()\n";
$ret = Finance::TA::TA_Shutdown();
ce($ret);



