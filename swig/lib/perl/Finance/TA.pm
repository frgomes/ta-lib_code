# This file was automatically generated by SWIG
package Finance::TA;
require Exporter;
require DynaLoader;
@ISA = qw(Exporter DynaLoader);
package Finance::TAc;
bootstrap Finance::TA;
package Finance::TA;
@EXPORT = qw( );

# ---------- BASE METHODS -------------

package Finance::TA;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Finance::TA;

*TA_GetVersionString = *Finance::TAc::TA_GetVersionString;
*TA_GetVersionMajor = *Finance::TAc::TA_GetVersionMajor;
*TA_GetVersionMinor = *Finance::TAc::TA_GetVersionMinor;
*TA_GetVersionBuild = *Finance::TAc::TA_GetVersionBuild;
*TA_GetVersionDate = *Finance::TAc::TA_GetVersionDate;
*TA_GetVersionTime = *Finance::TAc::TA_GetVersionTime;
*TA_SetRetCodeInfo = *Finance::TAc::TA_SetRetCodeInfo;
*TA_GetYear = *Finance::TAc::TA_GetYear;
*TA_GetMonth = *Finance::TAc::TA_GetMonth;
*TA_GetDay = *Finance::TAc::TA_GetDay;
*TA_GetHour = *Finance::TAc::TA_GetHour;
*TA_GetMin = *Finance::TAc::TA_GetMin;
*TA_GetSec = *Finance::TAc::TA_GetSec;
*TA_GetDayOfTheWeek = *Finance::TAc::TA_GetDayOfTheWeek;
*TA_GetDayOfTheYear = *Finance::TAc::TA_GetDayOfTheYear;
*TA_GetWeekOfTheYear = *Finance::TAc::TA_GetWeekOfTheYear;
*TA_GetQuarterOfTheYear = *Finance::TAc::TA_GetQuarterOfTheYear;
*TA_GetDate = *Finance::TAc::TA_GetDate;
*TA_GetTime = *Finance::TAc::TA_GetTime;
*TA_SetDate = *Finance::TAc::TA_SetDate;
*TA_SetTime = *Finance::TAc::TA_SetTime;
*TA_SetDefault = *Finance::TAc::TA_SetDefault;
*TA_SetDateNow = *Finance::TAc::TA_SetDateNow;
*TA_SetTimeNow = *Finance::TAc::TA_SetTimeNow;
*TA_TimestampValidate = *Finance::TAc::TA_TimestampValidate;
*TA_TimestampAlign = *Finance::TAc::TA_TimestampAlign;
*TA_TimestampValidateYMD = *Finance::TAc::TA_TimestampValidateYMD;
*TA_TimestampValidateHMS = *Finance::TAc::TA_TimestampValidateHMS;
*TA_TimestampEqual = *Finance::TAc::TA_TimestampEqual;
*TA_TimestampLess = *Finance::TAc::TA_TimestampLess;
*TA_TimestampGreater = *Finance::TAc::TA_TimestampGreater;
*TA_TimestampCompare = *Finance::TAc::TA_TimestampCompare;
*TA_TimestampDateEqual = *Finance::TAc::TA_TimestampDateEqual;
*TA_TimestampDateLess = *Finance::TAc::TA_TimestampDateLess;
*TA_TimestampDateGreater = *Finance::TAc::TA_TimestampDateGreater;
*TA_TimestampDateCompare = *Finance::TAc::TA_TimestampDateCompare;
*TA_NextDay = *Finance::TAc::TA_NextDay;
*TA_NextYear = *Finance::TAc::TA_NextYear;
*TA_PrevYear = *Finance::TAc::TA_PrevYear;
*TA_PrevDay = *Finance::TAc::TA_PrevDay;
*TA_NextWeekday = *Finance::TAc::TA_NextWeekday;
*TA_PrevWeekday = *Finance::TAc::TA_PrevWeekday;
*TA_JumpToEndOfMonth = *Finance::TAc::TA_JumpToEndOfMonth;
*TA_BackToBeginOfMonth = *Finance::TAc::TA_BackToBeginOfMonth;
*TA_JumpToEndOfQuarter = *Finance::TAc::TA_JumpToEndOfQuarter;
*TA_BackToBeginOfQuarter = *Finance::TAc::TA_BackToBeginOfQuarter;
*TA_JumpToEndOfYear = *Finance::TAc::TA_JumpToEndOfYear;
*TA_BackToBeginOfYear = *Finance::TAc::TA_BackToBeginOfYear;
*TA_JumpToDayOfWeek = *Finance::TAc::TA_JumpToDayOfWeek;
*TA_BackToDayOfWeek = *Finance::TAc::TA_BackToDayOfWeek;
*TA_TimestampCopy = *Finance::TAc::TA_TimestampCopy;
*TA_AddTimeToTimestamp = *Finance::TAc::TA_AddTimeToTimestamp;
*TA_TimestampDeltaWeek = *Finance::TAc::TA_TimestampDeltaWeek;
*TA_TimestampDeltaMonth = *Finance::TAc::TA_TimestampDeltaMonth;
*TA_TimestampDeltaYear = *Finance::TAc::TA_TimestampDeltaYear;
*TA_TimestampDeltaDay = *Finance::TAc::TA_TimestampDeltaDay;
*TA_TimestampDeltaWeekday = *Finance::TAc::TA_TimestampDeltaWeekday;
*TA_TimestampDeltaQuarter = *Finance::TAc::TA_TimestampDeltaQuarter;
*TA_TimestampDeltaIntraday = *Finance::TAc::TA_TimestampDeltaIntraday;
*TA_Initialize = *Finance::TAc::TA_Initialize;
*TA_Shutdown = *Finance::TAc::TA_Shutdown;
*TA_FatalReport = *Finance::TAc::TA_FatalReport;
*TA_FatalReportToBuffer = *Finance::TAc::TA_FatalReportToBuffer;
*TA_RegressionTest = *Finance::TAc::TA_RegressionTest;
*TA_UDBaseAlloc = *Finance::TAc::TA_UDBaseAlloc;
*TA_UDBaseFree = *Finance::TAc::TA_UDBaseFree;
*TA_AddDataSource = *Finance::TAc::TA_AddDataSource;
*TA_CategoryTable = *Finance::TAc::TA_CategoryTable;
*TA_SymbolTable = *Finance::TAc::TA_SymbolTable;
*TA_HistoryAlloc = *Finance::TAc::TA_HistoryAlloc;
*TA_HistoryFree = *Finance::TAc::TA_HistoryFree;
*TA_HistoryEqual = *Finance::TAc::TA_HistoryEqual;
*TA_Report = *Finance::TAc::TA_Report;
*TA_WebFetch = *Finance::TAc::TA_WebFetch;
*TA_MAX = *Finance::TAc::TA_MAX;
*TA_MAX_Lookback = *Finance::TAc::TA_MAX_Lookback;
*TA_MIN = *Finance::TAc::TA_MIN;
*TA_MIN_Lookback = *Finance::TAc::TA_MIN_Lookback;
*TA_BBANDS = *Finance::TAc::TA_BBANDS;
*TA_BBANDS_Lookback = *Finance::TAc::TA_BBANDS_Lookback;
*TA_DEMA = *Finance::TAc::TA_DEMA;
*TA_DEMA_Lookback = *Finance::TAc::TA_DEMA_Lookback;
*TA_EMA = *Finance::TAc::TA_EMA;
*TA_EMA_Lookback = *Finance::TAc::TA_EMA_Lookback;
*TA_HT_TRENDLINE = *Finance::TAc::TA_HT_TRENDLINE;
*TA_HT_TRENDLINE_Lookback = *Finance::TAc::TA_HT_TRENDLINE_Lookback;
*TA_KAMA = *Finance::TAc::TA_KAMA;
*TA_KAMA_Lookback = *Finance::TAc::TA_KAMA_Lookback;
*TA_MA = *Finance::TAc::TA_MA;
*TA_MA_Lookback = *Finance::TAc::TA_MA_Lookback;
*TA_MAMA = *Finance::TAc::TA_MAMA;
*TA_MAMA_Lookback = *Finance::TAc::TA_MAMA_Lookback;
*TA_MIDPRICE = *Finance::TAc::TA_MIDPRICE;
*TA_MIDPRICE_Lookback = *Finance::TAc::TA_MIDPRICE_Lookback;
*TA_MIDPOINT = *Finance::TAc::TA_MIDPOINT;
*TA_MIDPOINT_Lookback = *Finance::TAc::TA_MIDPOINT_Lookback;
*TA_SAR = *Finance::TAc::TA_SAR;
*TA_SAR_Lookback = *Finance::TAc::TA_SAR_Lookback;
*TA_SAREXT = *Finance::TAc::TA_SAREXT;
*TA_SAREXT_Lookback = *Finance::TAc::TA_SAREXT_Lookback;
*TA_SMA = *Finance::TAc::TA_SMA;
*TA_SMA_Lookback = *Finance::TAc::TA_SMA_Lookback;
*TA_T3 = *Finance::TAc::TA_T3;
*TA_T3_Lookback = *Finance::TAc::TA_T3_Lookback;
*TA_TEMA = *Finance::TAc::TA_TEMA;
*TA_TEMA_Lookback = *Finance::TAc::TA_TEMA_Lookback;
*TA_TRIMA = *Finance::TAc::TA_TRIMA;
*TA_TRIMA_Lookback = *Finance::TAc::TA_TRIMA_Lookback;
*TA_WMA = *Finance::TAc::TA_WMA;
*TA_WMA_Lookback = *Finance::TAc::TA_WMA_Lookback;
*TA_ATR = *Finance::TAc::TA_ATR;
*TA_ATR_Lookback = *Finance::TAc::TA_ATR_Lookback;
*TA_TRANGE = *Finance::TAc::TA_TRANGE;
*TA_TRANGE_Lookback = *Finance::TAc::TA_TRANGE_Lookback;
*TA_ADX = *Finance::TAc::TA_ADX;
*TA_ADX_Lookback = *Finance::TAc::TA_ADX_Lookback;
*TA_ADXR = *Finance::TAc::TA_ADXR;
*TA_ADXR_Lookback = *Finance::TAc::TA_ADXR_Lookback;
*TA_APO = *Finance::TAc::TA_APO;
*TA_APO_Lookback = *Finance::TAc::TA_APO_Lookback;
*TA_AROON = *Finance::TAc::TA_AROON;
*TA_AROON_Lookback = *Finance::TAc::TA_AROON_Lookback;
*TA_AROONOSC = *Finance::TAc::TA_AROONOSC;
*TA_AROONOSC_Lookback = *Finance::TAc::TA_AROONOSC_Lookback;
*TA_CCI = *Finance::TAc::TA_CCI;
*TA_CCI_Lookback = *Finance::TAc::TA_CCI_Lookback;
*TA_DX = *Finance::TAc::TA_DX;
*TA_DX_Lookback = *Finance::TAc::TA_DX_Lookback;
*TA_MACD = *Finance::TAc::TA_MACD;
*TA_MACD_Lookback = *Finance::TAc::TA_MACD_Lookback;
*TA_MACDEXT = *Finance::TAc::TA_MACDEXT;
*TA_MACDEXT_Lookback = *Finance::TAc::TA_MACDEXT_Lookback;
*TA_MACDFIX = *Finance::TAc::TA_MACDFIX;
*TA_MACDFIX_Lookback = *Finance::TAc::TA_MACDFIX_Lookback;
*TA_MFI = *Finance::TAc::TA_MFI;
*TA_MFI_Lookback = *Finance::TAc::TA_MFI_Lookback;
*TA_MINUS_DI = *Finance::TAc::TA_MINUS_DI;
*TA_MINUS_DI_Lookback = *Finance::TAc::TA_MINUS_DI_Lookback;
*TA_MINUS_DM = *Finance::TAc::TA_MINUS_DM;
*TA_MINUS_DM_Lookback = *Finance::TAc::TA_MINUS_DM_Lookback;
*TA_MOM = *Finance::TAc::TA_MOM;
*TA_MOM_Lookback = *Finance::TAc::TA_MOM_Lookback;
*TA_PPO = *Finance::TAc::TA_PPO;
*TA_PPO_Lookback = *Finance::TAc::TA_PPO_Lookback;
*TA_PLUS_DI = *Finance::TAc::TA_PLUS_DI;
*TA_PLUS_DI_Lookback = *Finance::TAc::TA_PLUS_DI_Lookback;
*TA_PLUS_DM = *Finance::TAc::TA_PLUS_DM;
*TA_PLUS_DM_Lookback = *Finance::TAc::TA_PLUS_DM_Lookback;
*TA_ROC = *Finance::TAc::TA_ROC;
*TA_ROC_Lookback = *Finance::TAc::TA_ROC_Lookback;
*TA_ROCP = *Finance::TAc::TA_ROCP;
*TA_ROCP_Lookback = *Finance::TAc::TA_ROCP_Lookback;
*TA_ROCR = *Finance::TAc::TA_ROCR;
*TA_ROCR_Lookback = *Finance::TAc::TA_ROCR_Lookback;
*TA_ROCR100 = *Finance::TAc::TA_ROCR100;
*TA_ROCR100_Lookback = *Finance::TAc::TA_ROCR100_Lookback;
*TA_RSI = *Finance::TAc::TA_RSI;
*TA_RSI_Lookback = *Finance::TAc::TA_RSI_Lookback;
*TA_STOCH = *Finance::TAc::TA_STOCH;
*TA_STOCH_Lookback = *Finance::TAc::TA_STOCH_Lookback;
*TA_STOCHF = *Finance::TAc::TA_STOCHF;
*TA_STOCHF_Lookback = *Finance::TAc::TA_STOCHF_Lookback;
*TA_STOCHRSI = *Finance::TAc::TA_STOCHRSI;
*TA_STOCHRSI_Lookback = *Finance::TAc::TA_STOCHRSI_Lookback;
*TA_TRIX = *Finance::TAc::TA_TRIX;
*TA_TRIX_Lookback = *Finance::TAc::TA_TRIX_Lookback;
*TA_WILLR = *Finance::TAc::TA_WILLR;
*TA_WILLR_Lookback = *Finance::TAc::TA_WILLR_Lookback;
*TA_HT_DCPERIOD = *Finance::TAc::TA_HT_DCPERIOD;
*TA_HT_DCPERIOD_Lookback = *Finance::TAc::TA_HT_DCPERIOD_Lookback;
*TA_HT_DCPHASE = *Finance::TAc::TA_HT_DCPHASE;
*TA_HT_DCPHASE_Lookback = *Finance::TAc::TA_HT_DCPHASE_Lookback;
*TA_HT_PHASOR = *Finance::TAc::TA_HT_PHASOR;
*TA_HT_PHASOR_Lookback = *Finance::TAc::TA_HT_PHASOR_Lookback;
*TA_HT_SINE = *Finance::TAc::TA_HT_SINE;
*TA_HT_SINE_Lookback = *Finance::TAc::TA_HT_SINE_Lookback;
*TA_HT_TRENDMODE = *Finance::TAc::TA_HT_TRENDMODE;
*TA_HT_TRENDMODE_Lookback = *Finance::TAc::TA_HT_TRENDMODE_Lookback;
*TA_AD = *Finance::TAc::TA_AD;
*TA_AD_Lookback = *Finance::TAc::TA_AD_Lookback;
*TA_ADOSC = *Finance::TAc::TA_ADOSC;
*TA_ADOSC_Lookback = *Finance::TAc::TA_ADOSC_Lookback;
*TA_OBV = *Finance::TAc::TA_OBV;
*TA_OBV_Lookback = *Finance::TAc::TA_OBV_Lookback;
*TA_CDL2CROWS = *Finance::TAc::TA_CDL2CROWS;
*TA_CDL2CROWS_Lookback = *Finance::TAc::TA_CDL2CROWS_Lookback;
*TA_CDL3BLACKCROWS = *Finance::TAc::TA_CDL3BLACKCROWS;
*TA_CDL3BLACKCROWS_Lookback = *Finance::TAc::TA_CDL3BLACKCROWS_Lookback;
*TA_CDL3INSIDE = *Finance::TAc::TA_CDL3INSIDE;
*TA_CDL3INSIDE_Lookback = *Finance::TAc::TA_CDL3INSIDE_Lookback;
*TA_CDL3LINESTRIKE = *Finance::TAc::TA_CDL3LINESTRIKE;
*TA_CDL3LINESTRIKE_Lookback = *Finance::TAc::TA_CDL3LINESTRIKE_Lookback;
*TA_CDL3OUTSIDE = *Finance::TAc::TA_CDL3OUTSIDE;
*TA_CDL3OUTSIDE_Lookback = *Finance::TAc::TA_CDL3OUTSIDE_Lookback;
*TA_CDL3STARSINSOUTH = *Finance::TAc::TA_CDL3STARSINSOUTH;
*TA_CDL3STARSINSOUTH_Lookback = *Finance::TAc::TA_CDL3STARSINSOUTH_Lookback;
*TA_CDL3WHITESOLDIERS = *Finance::TAc::TA_CDL3WHITESOLDIERS;
*TA_CDL3WHITESOLDIERS_Lookback = *Finance::TAc::TA_CDL3WHITESOLDIERS_Lookback;
*TA_CDLABANDONEDBABY = *Finance::TAc::TA_CDLABANDONEDBABY;
*TA_CDLABANDONEDBABY_Lookback = *Finance::TAc::TA_CDLABANDONEDBABY_Lookback;
*TA_CDLADVANCEBLOCK = *Finance::TAc::TA_CDLADVANCEBLOCK;
*TA_CDLADVANCEBLOCK_Lookback = *Finance::TAc::TA_CDLADVANCEBLOCK_Lookback;
*TA_CDLBELTHOLD = *Finance::TAc::TA_CDLBELTHOLD;
*TA_CDLBELTHOLD_Lookback = *Finance::TAc::TA_CDLBELTHOLD_Lookback;
*TA_CDLBREAKAWAY = *Finance::TAc::TA_CDLBREAKAWAY;
*TA_CDLBREAKAWAY_Lookback = *Finance::TAc::TA_CDLBREAKAWAY_Lookback;
*TA_CDLCLOSINGMARUBOZU = *Finance::TAc::TA_CDLCLOSINGMARUBOZU;
*TA_CDLCLOSINGMARUBOZU_Lookback = *Finance::TAc::TA_CDLCLOSINGMARUBOZU_Lookback;
*TA_CDLCONCEALBABYSWALL = *Finance::TAc::TA_CDLCONCEALBABYSWALL;
*TA_CDLCONCEALBABYSWALL_Lookback = *Finance::TAc::TA_CDLCONCEALBABYSWALL_Lookback;
*TA_CDLCOUNTERATTACK = *Finance::TAc::TA_CDLCOUNTERATTACK;
*TA_CDLCOUNTERATTACK_Lookback = *Finance::TAc::TA_CDLCOUNTERATTACK_Lookback;
*TA_CDLDARKCLOUDCOVER = *Finance::TAc::TA_CDLDARKCLOUDCOVER;
*TA_CDLDARKCLOUDCOVER_Lookback = *Finance::TAc::TA_CDLDARKCLOUDCOVER_Lookback;
*TA_CDLDOJI = *Finance::TAc::TA_CDLDOJI;
*TA_CDLDOJI_Lookback = *Finance::TAc::TA_CDLDOJI_Lookback;
*TA_CDLDOJISTAR = *Finance::TAc::TA_CDLDOJISTAR;
*TA_CDLDOJISTAR_Lookback = *Finance::TAc::TA_CDLDOJISTAR_Lookback;
*TA_CDLDRAGONFLYDOJI = *Finance::TAc::TA_CDLDRAGONFLYDOJI;
*TA_CDLDRAGONFLYDOJI_Lookback = *Finance::TAc::TA_CDLDRAGONFLYDOJI_Lookback;
*TA_CDLENGULFING = *Finance::TAc::TA_CDLENGULFING;
*TA_CDLENGULFING_Lookback = *Finance::TAc::TA_CDLENGULFING_Lookback;
*TA_CDLEVENINGDOJISTAR = *Finance::TAc::TA_CDLEVENINGDOJISTAR;
*TA_CDLEVENINGDOJISTAR_Lookback = *Finance::TAc::TA_CDLEVENINGDOJISTAR_Lookback;
*TA_CDLEVENINGSTAR = *Finance::TAc::TA_CDLEVENINGSTAR;
*TA_CDLEVENINGSTAR_Lookback = *Finance::TAc::TA_CDLEVENINGSTAR_Lookback;
*TA_CDLGAPSIDESIDEWHITE = *Finance::TAc::TA_CDLGAPSIDESIDEWHITE;
*TA_CDLGAPSIDESIDEWHITE_Lookback = *Finance::TAc::TA_CDLGAPSIDESIDEWHITE_Lookback;
*TA_CDLGRAVESTONEDOJI = *Finance::TAc::TA_CDLGRAVESTONEDOJI;
*TA_CDLGRAVESTONEDOJI_Lookback = *Finance::TAc::TA_CDLGRAVESTONEDOJI_Lookback;
*TA_CDLHAMMER = *Finance::TAc::TA_CDLHAMMER;
*TA_CDLHAMMER_Lookback = *Finance::TAc::TA_CDLHAMMER_Lookback;
*TA_CDLHANGINGMAN = *Finance::TAc::TA_CDLHANGINGMAN;
*TA_CDLHANGINGMAN_Lookback = *Finance::TAc::TA_CDLHANGINGMAN_Lookback;
*TA_CDLHARAMI = *Finance::TAc::TA_CDLHARAMI;
*TA_CDLHARAMI_Lookback = *Finance::TAc::TA_CDLHARAMI_Lookback;
*TA_CDLHARAMICROSS = *Finance::TAc::TA_CDLHARAMICROSS;
*TA_CDLHARAMICROSS_Lookback = *Finance::TAc::TA_CDLHARAMICROSS_Lookback;
*TA_CDLHIGHWAVE = *Finance::TAc::TA_CDLHIGHWAVE;
*TA_CDLHIGHWAVE_Lookback = *Finance::TAc::TA_CDLHIGHWAVE_Lookback;
*TA_CDLHOMINGPIGEON = *Finance::TAc::TA_CDLHOMINGPIGEON;
*TA_CDLHOMINGPIGEON_Lookback = *Finance::TAc::TA_CDLHOMINGPIGEON_Lookback;
*TA_CDLIDENTICAL3CROWS = *Finance::TAc::TA_CDLIDENTICAL3CROWS;
*TA_CDLIDENTICAL3CROWS_Lookback = *Finance::TAc::TA_CDLIDENTICAL3CROWS_Lookback;
*TA_CDLINNECK = *Finance::TAc::TA_CDLINNECK;
*TA_CDLINNECK_Lookback = *Finance::TAc::TA_CDLINNECK_Lookback;
*TA_CDLINVERTEDHAMMER = *Finance::TAc::TA_CDLINVERTEDHAMMER;
*TA_CDLINVERTEDHAMMER_Lookback = *Finance::TAc::TA_CDLINVERTEDHAMMER_Lookback;
*TA_CDLKICKING = *Finance::TAc::TA_CDLKICKING;
*TA_CDLKICKING_Lookback = *Finance::TAc::TA_CDLKICKING_Lookback;
*TA_CDLKICKINGBYLENGTH = *Finance::TAc::TA_CDLKICKINGBYLENGTH;
*TA_CDLKICKINGBYLENGTH_Lookback = *Finance::TAc::TA_CDLKICKINGBYLENGTH_Lookback;
*TA_CDLLADDERBOTTOM = *Finance::TAc::TA_CDLLADDERBOTTOM;
*TA_CDLLADDERBOTTOM_Lookback = *Finance::TAc::TA_CDLLADDERBOTTOM_Lookback;
*TA_CDLLONGLEGGEDDOJI = *Finance::TAc::TA_CDLLONGLEGGEDDOJI;
*TA_CDLLONGLEGGEDDOJI_Lookback = *Finance::TAc::TA_CDLLONGLEGGEDDOJI_Lookback;
*TA_CDLLONGLINE = *Finance::TAc::TA_CDLLONGLINE;
*TA_CDLLONGLINE_Lookback = *Finance::TAc::TA_CDLLONGLINE_Lookback;
*TA_CDLMARUBOZU = *Finance::TAc::TA_CDLMARUBOZU;
*TA_CDLMARUBOZU_Lookback = *Finance::TAc::TA_CDLMARUBOZU_Lookback;
*TA_CDLMATHOLD = *Finance::TAc::TA_CDLMATHOLD;
*TA_CDLMATHOLD_Lookback = *Finance::TAc::TA_CDLMATHOLD_Lookback;
*TA_CDLMATCHINGLOW = *Finance::TAc::TA_CDLMATCHINGLOW;
*TA_CDLMATCHINGLOW_Lookback = *Finance::TAc::TA_CDLMATCHINGLOW_Lookback;
*TA_CDLMORNINGDOJISTAR = *Finance::TAc::TA_CDLMORNINGDOJISTAR;
*TA_CDLMORNINGDOJISTAR_Lookback = *Finance::TAc::TA_CDLMORNINGDOJISTAR_Lookback;
*TA_CDLMORNINGSTAR = *Finance::TAc::TA_CDLMORNINGSTAR;
*TA_CDLMORNINGSTAR_Lookback = *Finance::TAc::TA_CDLMORNINGSTAR_Lookback;
*TA_CDLONNECK = *Finance::TAc::TA_CDLONNECK;
*TA_CDLONNECK_Lookback = *Finance::TAc::TA_CDLONNECK_Lookback;
*TA_CDLPIERCING = *Finance::TAc::TA_CDLPIERCING;
*TA_CDLPIERCING_Lookback = *Finance::TAc::TA_CDLPIERCING_Lookback;
*TA_CDLRICKSHAWMAN = *Finance::TAc::TA_CDLRICKSHAWMAN;
*TA_CDLRICKSHAWMAN_Lookback = *Finance::TAc::TA_CDLRICKSHAWMAN_Lookback;
*TA_CDLRISEFALL3METHODS = *Finance::TAc::TA_CDLRISEFALL3METHODS;
*TA_CDLRISEFALL3METHODS_Lookback = *Finance::TAc::TA_CDLRISEFALL3METHODS_Lookback;
*TA_CDLSEPARATINGLINES = *Finance::TAc::TA_CDLSEPARATINGLINES;
*TA_CDLSEPARATINGLINES_Lookback = *Finance::TAc::TA_CDLSEPARATINGLINES_Lookback;
*TA_CDLSHOOTINGSTAR = *Finance::TAc::TA_CDLSHOOTINGSTAR;
*TA_CDLSHOOTINGSTAR_Lookback = *Finance::TAc::TA_CDLSHOOTINGSTAR_Lookback;
*TA_CDLSHORTLINE = *Finance::TAc::TA_CDLSHORTLINE;
*TA_CDLSHORTLINE_Lookback = *Finance::TAc::TA_CDLSHORTLINE_Lookback;
*TA_CDLSPINNINGTOP = *Finance::TAc::TA_CDLSPINNINGTOP;
*TA_CDLSPINNINGTOP_Lookback = *Finance::TAc::TA_CDLSPINNINGTOP_Lookback;
*TA_CDLSTALLEDPATTERN = *Finance::TAc::TA_CDLSTALLEDPATTERN;
*TA_CDLSTALLEDPATTERN_Lookback = *Finance::TAc::TA_CDLSTALLEDPATTERN_Lookback;
*TA_CDLSTICKSANDWICH = *Finance::TAc::TA_CDLSTICKSANDWICH;
*TA_CDLSTICKSANDWICH_Lookback = *Finance::TAc::TA_CDLSTICKSANDWICH_Lookback;
*TA_CDLTAKURI = *Finance::TAc::TA_CDLTAKURI;
*TA_CDLTAKURI_Lookback = *Finance::TAc::TA_CDLTAKURI_Lookback;
*TA_CDLTASUKIGAP = *Finance::TAc::TA_CDLTASUKIGAP;
*TA_CDLTASUKIGAP_Lookback = *Finance::TAc::TA_CDLTASUKIGAP_Lookback;
*TA_CDLTHRUSTING = *Finance::TAc::TA_CDLTHRUSTING;
*TA_CDLTHRUSTING_Lookback = *Finance::TAc::TA_CDLTHRUSTING_Lookback;
*TA_CDLTRISTAR = *Finance::TAc::TA_CDLTRISTAR;
*TA_CDLTRISTAR_Lookback = *Finance::TAc::TA_CDLTRISTAR_Lookback;
*TA_CDLUNIQUE3RIVER = *Finance::TAc::TA_CDLUNIQUE3RIVER;
*TA_CDLUNIQUE3RIVER_Lookback = *Finance::TAc::TA_CDLUNIQUE3RIVER_Lookback;
*TA_CDLUPSIDEGAP2CROWS = *Finance::TAc::TA_CDLUPSIDEGAP2CROWS;
*TA_CDLUPSIDEGAP2CROWS_Lookback = *Finance::TAc::TA_CDLUPSIDEGAP2CROWS_Lookback;
*TA_CDLXSIDEGAP3METHODS = *Finance::TAc::TA_CDLXSIDEGAP3METHODS;
*TA_CDLXSIDEGAP3METHODS_Lookback = *Finance::TAc::TA_CDLXSIDEGAP3METHODS_Lookback;
*TA_CORREL = *Finance::TAc::TA_CORREL;
*TA_CORREL_Lookback = *Finance::TAc::TA_CORREL_Lookback;
*TA_LINEARREG = *Finance::TAc::TA_LINEARREG;
*TA_LINEARREG_Lookback = *Finance::TAc::TA_LINEARREG_Lookback;
*TA_LINEARREG_SLOPE = *Finance::TAc::TA_LINEARREG_SLOPE;
*TA_LINEARREG_SLOPE_Lookback = *Finance::TAc::TA_LINEARREG_SLOPE_Lookback;
*TA_LINEARREG_ANGLE = *Finance::TAc::TA_LINEARREG_ANGLE;
*TA_LINEARREG_ANGLE_Lookback = *Finance::TAc::TA_LINEARREG_ANGLE_Lookback;
*TA_LINEARREG_INTERCEPT = *Finance::TAc::TA_LINEARREG_INTERCEPT;
*TA_LINEARREG_INTERCEPT_Lookback = *Finance::TAc::TA_LINEARREG_INTERCEPT_Lookback;
*TA_STDDEV = *Finance::TAc::TA_STDDEV;
*TA_STDDEV_Lookback = *Finance::TAc::TA_STDDEV_Lookback;
*TA_TSF = *Finance::TAc::TA_TSF;
*TA_TSF_Lookback = *Finance::TAc::TA_TSF_Lookback;
*TA_VAR = *Finance::TAc::TA_VAR;
*TA_VAR_Lookback = *Finance::TAc::TA_VAR_Lookback;
*TA_AVGPRICE = *Finance::TAc::TA_AVGPRICE;
*TA_AVGPRICE_Lookback = *Finance::TAc::TA_AVGPRICE_Lookback;
*TA_MEDPRICE = *Finance::TAc::TA_MEDPRICE;
*TA_MEDPRICE_Lookback = *Finance::TAc::TA_MEDPRICE_Lookback;
*TA_TYPPRICE = *Finance::TAc::TA_TYPPRICE;
*TA_TYPPRICE_Lookback = *Finance::TAc::TA_TYPPRICE_Lookback;
*TA_WCLPRICE = *Finance::TAc::TA_WCLPRICE;
*TA_WCLPRICE_Lookback = *Finance::TAc::TA_WCLPRICE_Lookback;
*TA_SetUnstablePeriod = *Finance::TAc::TA_SetUnstablePeriod;
*TA_GetUnstablePeriod = *Finance::TAc::TA_GetUnstablePeriod;
*TA_SetCompatibility = *Finance::TAc::TA_SetCompatibility;
*TA_GetCompatibility = *Finance::TAc::TA_GetCompatibility;
*TA_SetCandleSettings = *Finance::TAc::TA_SetCandleSettings;
*TA_RestoreCandleDefaultSettings = *Finance::TAc::TA_RestoreCandleDefaultSettings;
*TA_TradeLogAlloc = *Finance::TAc::TA_TradeLogAlloc;
*TA_TradeLogFree = *Finance::TAc::TA_TradeLogFree;
*TA_TradeLogAdd = *Finance::TAc::TA_TradeLogAdd;
*TA_PMAlloc = *Finance::TAc::TA_PMAlloc;
*TA_PMFree = *Finance::TAc::TA_PMFree;
*TA_PMAddTradeLog = *Finance::TAc::TA_PMAddTradeLog;
*TA_PMValue = *Finance::TAc::TA_PMValue;
*TA_PMValueIdString = *Finance::TAc::TA_PMValueIdString;
*TA_PMValueIdHint = *Finance::TAc::TA_PMValueIdHint;
*TA_PMValueIdFlags = *Finance::TAc::TA_PMValueIdFlags;
*TA_PMArrayAlloc = *Finance::TAc::TA_PMArrayAlloc;
*TA_PMArrayFree = *Finance::TAc::TA_PMArrayFree;
*TA_PMReport = *Finance::TAc::TA_PMReport;
*TA_TradeReportAlloc = *Finance::TAc::TA_TradeReportAlloc;
*TA_TradeReportFree = *Finance::TAc::TA_TradeReportFree;
*TA_TradeReportToFile = *Finance::TAc::TA_TradeReportToFile;
*TA_GroupTable = *Finance::TAc::TA_GroupTable;
*TA_FuncTable = *Finance::TAc::TA_FuncTable;
*TA_GetFuncHandle = *Finance::TAc::TA_GetFuncHandle;
*TA_GetFuncInfo = *Finance::TAc::TA_GetFuncInfo;
*TA_GetInputParameterInfo = *Finance::TAc::TA_GetInputParameterInfo;
*TA_GetOptInputParameterInfo = *Finance::TAc::TA_GetOptInputParameterInfo;
*TA_GetOutputParameterInfo = *Finance::TAc::TA_GetOutputParameterInfo;

############# Class : Finance::TA::TA_Timestamp ##############

package Finance::TA::TA_Timestamp;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_date_get = *Finance::TAc::TA_Timestamp_date_get;
*swig_date_set = *Finance::TAc::TA_Timestamp_date_set;
*swig_time_get = *Finance::TAc::TA_Timestamp_time_get;
*swig_time_set = *Finance::TAc::TA_Timestamp_time_set;
*swig_year_get = *Finance::TAc::TA_Timestamp_year_get;
*swig_year_set = *Finance::TAc::TA_Timestamp_year_set;
*swig_month_get = *Finance::TAc::TA_Timestamp_month_get;
*swig_month_set = *Finance::TAc::TA_Timestamp_month_set;
*swig_day_get = *Finance::TAc::TA_Timestamp_day_get;
*swig_day_set = *Finance::TAc::TA_Timestamp_day_set;
*swig_hours_get = *Finance::TAc::TA_Timestamp_hours_get;
*swig_hours_set = *Finance::TAc::TA_Timestamp_hours_set;
*swig_minutes_get = *Finance::TAc::TA_Timestamp_minutes_get;
*swig_minutes_set = *Finance::TAc::TA_Timestamp_minutes_set;
*swig_seconds_get = *Finance::TAc::TA_Timestamp_seconds_get;
*swig_seconds_set = *Finance::TAc::TA_Timestamp_seconds_set;
sub new {
    my $pkg = shift;
    my $self = Finance::TAc::new_TA_Timestamp(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Finance::TAc::delete_TA_Timestamp($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_RetCodeInfo ##############

package Finance::TA::TA_RetCodeInfo;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_enumStr_get = *Finance::TAc::TA_RetCodeInfo_enumStr_get;
*swig_enumStr_set = *Finance::TAc::TA_RetCodeInfo_enumStr_set;
*swig_infoStr_get = *Finance::TAc::TA_RetCodeInfo_infoStr_get;
*swig_infoStr_set = *Finance::TAc::TA_RetCodeInfo_infoStr_set;
sub new {
    my $pkg = shift;
    my $self = Finance::TAc::new_TA_RetCodeInfo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Finance::TAc::delete_TA_RetCodeInfo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_InitializeParam ##############

package Finance::TA::TA_InitializeParam;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_logOutput_get = *Finance::TAc::TA_InitializeParam_logOutput_get;
*swig_logOutput_set = *Finance::TAc::TA_InitializeParam_logOutput_set;
*swig_userLocalDrive_get = *Finance::TAc::TA_InitializeParam_userLocalDrive_get;
*swig_userLocalDrive_set = *Finance::TAc::TA_InitializeParam_userLocalDrive_set;
sub new {
    my $pkg = shift;
    my $self = Finance::TAc::new_TA_InitializeParam(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Finance::TAc::delete_TA_InitializeParam($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_UDBase ##############

package Finance::TA::TA_UDBase;
@ISA = qw( Finance::TA );
our %OWNER = ();
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_AddDataSourceParam ##############

package Finance::TA::TA_AddDataSourceParam;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_id_get = *Finance::TAc::TA_AddDataSourceParam_id_get;
*swig_id_set = *Finance::TAc::TA_AddDataSourceParam_id_set;
*swig_flags_get = *Finance::TAc::TA_AddDataSourceParam_flags_get;
*swig_flags_set = *Finance::TAc::TA_AddDataSourceParam_flags_set;
*swig_period_get = *Finance::TAc::TA_AddDataSourceParam_period_get;
*swig_period_set = *Finance::TAc::TA_AddDataSourceParam_period_set;
*swig_location_get = *Finance::TAc::TA_AddDataSourceParam_location_get;
*swig_location_set = *Finance::TAc::TA_AddDataSourceParam_location_set;
*swig_info_get = *Finance::TAc::TA_AddDataSourceParam_info_get;
*swig_info_set = *Finance::TAc::TA_AddDataSourceParam_info_set;
*swig_username_get = *Finance::TAc::TA_AddDataSourceParam_username_get;
*swig_username_set = *Finance::TAc::TA_AddDataSourceParam_username_set;
*swig_password_get = *Finance::TAc::TA_AddDataSourceParam_password_get;
*swig_password_set = *Finance::TAc::TA_AddDataSourceParam_password_set;
*swig_category_get = *Finance::TAc::TA_AddDataSourceParam_category_get;
*swig_category_set = *Finance::TAc::TA_AddDataSourceParam_category_set;
*swig_country_get = *Finance::TAc::TA_AddDataSourceParam_country_get;
*swig_country_set = *Finance::TAc::TA_AddDataSourceParam_country_set;
*swig_exchange_get = *Finance::TAc::TA_AddDataSourceParam_exchange_get;
*swig_exchange_set = *Finance::TAc::TA_AddDataSourceParam_exchange_set;
*swig_type_get = *Finance::TAc::TA_AddDataSourceParam_type_get;
*swig_type_set = *Finance::TAc::TA_AddDataSourceParam_type_set;
*swig_symbol_get = *Finance::TAc::TA_AddDataSourceParam_symbol_get;
*swig_symbol_set = *Finance::TAc::TA_AddDataSourceParam_symbol_set;
*swig_sourceName_get = *Finance::TAc::TA_AddDataSourceParam_sourceName_get;
*swig_sourceName_set = *Finance::TAc::TA_AddDataSourceParam_sourceName_set;
sub new {
    my $pkg = shift;
    my $self = Finance::TAc::new_TA_AddDataSourceParam(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Finance::TAc::delete_TA_AddDataSourceParam($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_History ##############

package Finance::TA::TA_History;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_nbBars_get = *Finance::TAc::TA_History_nbBars_get;
*swig_nbBars_set = *Finance::TAc::TA_History_nbBars_set;
*swig_period_get = *Finance::TAc::TA_History_period_get;
*swig_period_set = *Finance::TAc::TA_History_period_set;
*swig_timestamp_get = *Finance::TAc::TA_History_timestamp_get;
*swig_timestamp_set = *Finance::TAc::TA_History_timestamp_set;
*swig_open_get = *Finance::TAc::TA_History_open_get;
*swig_open_set = *Finance::TAc::TA_History_open_set;
*swig_high_get = *Finance::TAc::TA_History_high_get;
*swig_high_set = *Finance::TAc::TA_History_high_set;
*swig_low_get = *Finance::TAc::TA_History_low_get;
*swig_low_set = *Finance::TAc::TA_History_low_set;
*swig_close_get = *Finance::TAc::TA_History_close_get;
*swig_close_set = *Finance::TAc::TA_History_close_set;
*swig_volume_get = *Finance::TAc::TA_History_volume_get;
*swig_volume_set = *Finance::TAc::TA_History_volume_set;
*swig_openInterest_get = *Finance::TAc::TA_History_openInterest_get;
*swig_openInterest_set = *Finance::TAc::TA_History_openInterest_set;
*swig_listOfSource_get = *Finance::TAc::TA_History_listOfSource_get;
*swig_listOfSource_set = *Finance::TAc::TA_History_listOfSource_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_HistoryAllocParam ##############

package Finance::TA::TA_HistoryAllocParam;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_sourceName_get = *Finance::TAc::TA_HistoryAllocParam_sourceName_get;
*swig_sourceName_set = *Finance::TAc::TA_HistoryAllocParam_sourceName_set;
*swig_category_get = *Finance::TAc::TA_HistoryAllocParam_category_get;
*swig_category_set = *Finance::TAc::TA_HistoryAllocParam_category_set;
*swig_symbol_get = *Finance::TAc::TA_HistoryAllocParam_symbol_get;
*swig_symbol_set = *Finance::TAc::TA_HistoryAllocParam_symbol_set;
*swig_period_get = *Finance::TAc::TA_HistoryAllocParam_period_get;
*swig_period_set = *Finance::TAc::TA_HistoryAllocParam_period_set;
*swig_start_get = *Finance::TAc::TA_HistoryAllocParam_start_get;
*swig_start_set = *Finance::TAc::TA_HistoryAllocParam_start_set;
*swig_end_get = *Finance::TAc::TA_HistoryAllocParam_end_get;
*swig_end_set = *Finance::TAc::TA_HistoryAllocParam_end_set;
*swig_field_get = *Finance::TAc::TA_HistoryAllocParam_field_get;
*swig_field_set = *Finance::TAc::TA_HistoryAllocParam_field_set;
*swig_flags_get = *Finance::TAc::TA_HistoryAllocParam_flags_get;
*swig_flags_set = *Finance::TAc::TA_HistoryAllocParam_flags_set;
sub new {
    my $pkg = shift;
    my $self = Finance::TAc::new_TA_HistoryAllocParam(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Finance::TAc::delete_TA_HistoryAllocParam($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_Instrument ##############

package Finance::TA::TA_Instrument;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_catString_get = *Finance::TAc::TA_Instrument_catString_get;
*swig_catString_set = *Finance::TAc::TA_Instrument_catString_set;
*swig_symString_get = *Finance::TAc::TA_Instrument_symString_get;
*swig_symString_set = *Finance::TAc::TA_Instrument_symString_set;
*swig_userKey_get = *Finance::TAc::TA_Instrument_userKey_get;
*swig_userKey_set = *Finance::TAc::TA_Instrument_userKey_set;
sub new {
    my $pkg = shift;
    my $self = Finance::TAc::new_TA_Instrument(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Finance::TAc::delete_TA_Instrument($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_Transaction ##############

package Finance::TA::TA_Transaction;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_type_get = *Finance::TAc::TA_Transaction_type_get;
*swig_type_set = *Finance::TAc::TA_Transaction_type_set;
*swig_id_get = *Finance::TAc::TA_Transaction_id_get;
*swig_id_set = *Finance::TAc::TA_Transaction_id_set;
*swig_execTimestamp_get = *Finance::TAc::TA_Transaction_execTimestamp_get;
*swig_execTimestamp_set = *Finance::TAc::TA_Transaction_execTimestamp_set;
*swig_quantity_get = *Finance::TAc::TA_Transaction_quantity_get;
*swig_quantity_set = *Finance::TAc::TA_Transaction_quantity_set;
*swig_price_get = *Finance::TAc::TA_Transaction_price_get;
*swig_price_set = *Finance::TAc::TA_Transaction_price_set;
*swig_nbPriceBar_get = *Finance::TAc::TA_Transaction_nbPriceBar_get;
*swig_nbPriceBar_set = *Finance::TAc::TA_Transaction_nbPriceBar_set;
*swig_highPrice_get = *Finance::TAc::TA_Transaction_highPrice_get;
*swig_highPrice_set = *Finance::TAc::TA_Transaction_highPrice_set;
*swig_lowPrice_get = *Finance::TAc::TA_Transaction_lowPrice_get;
*swig_lowPrice_set = *Finance::TAc::TA_Transaction_lowPrice_set;
sub new {
    my $pkg = shift;
    my $self = Finance::TAc::new_TA_Transaction(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Finance::TAc::delete_TA_Transaction($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_TradeLog ##############

package Finance::TA::TA_TradeLog;
@ISA = qw( Finance::TA );
our %OWNER = ();
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_PM ##############

package Finance::TA::TA_PM;
@ISA = qw( Finance::TA );
our %OWNER = ();
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_PMArray ##############

package Finance::TA::TA_PMArray;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_nbData_get = *Finance::TAc::TA_PMArray_nbData_get;
*swig_nbData_set = *Finance::TAc::TA_PMArray_nbData_set;
*swig_timestamp_get = *Finance::TAc::TA_PMArray_timestamp_get;
*swig_timestamp_set = *Finance::TAc::TA_PMArray_timestamp_set;
*swig_data_get = *Finance::TAc::TA_PMArray_data_get;
*swig_data_set = *Finance::TAc::TA_PMArray_data_set;
*swig_arrayId_get = *Finance::TAc::TA_PMArray_arrayId_get;
*swig_arrayId_set = *Finance::TAc::TA_PMArray_arrayId_set;
*swig_grp_get = *Finance::TAc::TA_PMArray_grp_get;
*swig_grp_set = *Finance::TAc::TA_PMArray_grp_set;
*swig_period_get = *Finance::TAc::TA_PMArray_period_get;
*swig_period_set = *Finance::TAc::TA_PMArray_period_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_Trade ##############

package Finance::TA::TA_Trade;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_quantity_get = *Finance::TAc::TA_Trade_quantity_get;
*swig_quantity_set = *Finance::TAc::TA_Trade_quantity_set;
*swig_entryPrice_get = *Finance::TAc::TA_Trade_entryPrice_get;
*swig_entryPrice_set = *Finance::TAc::TA_Trade_entryPrice_set;
*swig_entryTimestamp_get = *Finance::TAc::TA_Trade_entryTimestamp_get;
*swig_entryTimestamp_set = *Finance::TAc::TA_Trade_entryTimestamp_set;
*swig_exitTimestamp_get = *Finance::TAc::TA_Trade_exitTimestamp_get;
*swig_exitTimestamp_set = *Finance::TAc::TA_Trade_exitTimestamp_set;
*swig_profit_get = *Finance::TAc::TA_Trade_profit_get;
*swig_profit_set = *Finance::TAc::TA_Trade_profit_set;
*swig_id_get = *Finance::TAc::TA_Trade_id_get;
*swig_id_set = *Finance::TAc::TA_Trade_id_set;
*swig_mae_get = *Finance::TAc::TA_Trade_mae_get;
*swig_mae_set = *Finance::TAc::TA_Trade_mae_set;
*swig_minfe_get = *Finance::TAc::TA_Trade_minfe_get;
*swig_minfe_set = *Finance::TAc::TA_Trade_minfe_set;
*swig_maxfe_get = *Finance::TAc::TA_Trade_maxfe_get;
*swig_maxfe_set = *Finance::TAc::TA_Trade_maxfe_set;
sub new {
    my $pkg = shift;
    my $self = Finance::TAc::new_TA_Trade(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Finance::TAc::delete_TA_Trade($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_TradeReport ##############

package Finance::TA::TA_TradeReport;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_nbTrades_get = *Finance::TAc::TA_TradeReport_nbTrades_get;
*swig_nbTrades_set = *Finance::TAc::TA_TradeReport_nbTrades_set;
*swig_trades_get = *Finance::TAc::TA_TradeReport_trades_get;
*swig_trades_set = *Finance::TAc::TA_TradeReport_trades_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_FuncHandle ##############

package Finance::TA::TA_FuncHandle;
@ISA = qw( Finance::TA );
our %OWNER = ();
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_FuncInfo ##############

package Finance::TA::TA_FuncInfo;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_name_get = *Finance::TAc::TA_FuncInfo_name_get;
*swig_name_set = *Finance::TAc::TA_FuncInfo_name_set;
*swig_group_get = *Finance::TAc::TA_FuncInfo_group_get;
*swig_group_set = *Finance::TAc::TA_FuncInfo_group_set;
*swig_hint_get = *Finance::TAc::TA_FuncInfo_hint_get;
*swig_hint_set = *Finance::TAc::TA_FuncInfo_hint_set;
*swig_helpFile_get = *Finance::TAc::TA_FuncInfo_helpFile_get;
*swig_helpFile_set = *Finance::TAc::TA_FuncInfo_helpFile_set;
*swig_flags_get = *Finance::TAc::TA_FuncInfo_flags_get;
*swig_flags_set = *Finance::TAc::TA_FuncInfo_flags_set;
*swig_nbInput_get = *Finance::TAc::TA_FuncInfo_nbInput_get;
*swig_nbInput_set = *Finance::TAc::TA_FuncInfo_nbInput_set;
*swig_nbOptInput_get = *Finance::TAc::TA_FuncInfo_nbOptInput_get;
*swig_nbOptInput_set = *Finance::TAc::TA_FuncInfo_nbOptInput_set;
*swig_nbOutput_get = *Finance::TAc::TA_FuncInfo_nbOutput_get;
*swig_nbOutput_set = *Finance::TAc::TA_FuncInfo_nbOutput_set;
*swig_handle_get = *Finance::TAc::TA_FuncInfo_handle_get;
*swig_handle_set = *Finance::TAc::TA_FuncInfo_handle_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_RealRange ##############

package Finance::TA::TA_RealRange;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_min_get = *Finance::TAc::TA_RealRange_min_get;
*swig_min_set = *Finance::TAc::TA_RealRange_min_set;
*swig_max_get = *Finance::TAc::TA_RealRange_max_get;
*swig_max_set = *Finance::TAc::TA_RealRange_max_set;
*swig_precision_get = *Finance::TAc::TA_RealRange_precision_get;
*swig_precision_set = *Finance::TAc::TA_RealRange_precision_set;
*swig_suggested_start_get = *Finance::TAc::TA_RealRange_suggested_start_get;
*swig_suggested_start_set = *Finance::TAc::TA_RealRange_suggested_start_set;
*swig_suggested_end_get = *Finance::TAc::TA_RealRange_suggested_end_get;
*swig_suggested_end_set = *Finance::TAc::TA_RealRange_suggested_end_set;
*swig_suggested_increment_get = *Finance::TAc::TA_RealRange_suggested_increment_get;
*swig_suggested_increment_set = *Finance::TAc::TA_RealRange_suggested_increment_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_IntegerRange ##############

package Finance::TA::TA_IntegerRange;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_min_get = *Finance::TAc::TA_IntegerRange_min_get;
*swig_min_set = *Finance::TAc::TA_IntegerRange_min_set;
*swig_max_get = *Finance::TAc::TA_IntegerRange_max_get;
*swig_max_set = *Finance::TAc::TA_IntegerRange_max_set;
*swig_suggested_start_get = *Finance::TAc::TA_IntegerRange_suggested_start_get;
*swig_suggested_start_set = *Finance::TAc::TA_IntegerRange_suggested_start_set;
*swig_suggested_end_get = *Finance::TAc::TA_IntegerRange_suggested_end_get;
*swig_suggested_end_set = *Finance::TAc::TA_IntegerRange_suggested_end_set;
*swig_suggested_increment_get = *Finance::TAc::TA_IntegerRange_suggested_increment_get;
*swig_suggested_increment_set = *Finance::TAc::TA_IntegerRange_suggested_increment_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_RealDataPair ##############

package Finance::TA::TA_RealDataPair;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_value_get = *Finance::TAc::TA_RealDataPair_value_get;
*swig_value_set = *Finance::TAc::TA_RealDataPair_value_set;
*swig_string_get = *Finance::TAc::TA_RealDataPair_string_get;
*swig_string_set = *Finance::TAc::TA_RealDataPair_string_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_IntegerDataPair ##############

package Finance::TA::TA_IntegerDataPair;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_value_get = *Finance::TAc::TA_IntegerDataPair_value_get;
*swig_value_set = *Finance::TAc::TA_IntegerDataPair_value_set;
*swig_string_get = *Finance::TAc::TA_IntegerDataPair_string_get;
*swig_string_set = *Finance::TAc::TA_IntegerDataPair_string_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_RealList ##############

package Finance::TA::TA_RealList;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_data_get = *Finance::TAc::TA_RealList_data_get;
*swig_data_set = *Finance::TAc::TA_RealList_data_set;
*swig_nbElement_get = *Finance::TAc::TA_RealList_nbElement_get;
*swig_nbElement_set = *Finance::TAc::TA_RealList_nbElement_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_IntegerList ##############

package Finance::TA::TA_IntegerList;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_data_get = *Finance::TAc::TA_IntegerList_data_get;
*swig_data_set = *Finance::TAc::TA_IntegerList_data_set;
*swig_nbElement_get = *Finance::TAc::TA_IntegerList_nbElement_get;
*swig_nbElement_set = *Finance::TAc::TA_IntegerList_nbElement_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_InputParameterInfo ##############

package Finance::TA::TA_InputParameterInfo;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_type_get = *Finance::TAc::TA_InputParameterInfo_type_get;
*swig_type_set = *Finance::TAc::TA_InputParameterInfo_type_set;
*swig_paramName_get = *Finance::TAc::TA_InputParameterInfo_paramName_get;
*swig_paramName_set = *Finance::TAc::TA_InputParameterInfo_paramName_set;
*swig_flags_get = *Finance::TAc::TA_InputParameterInfo_flags_get;
*swig_flags_set = *Finance::TAc::TA_InputParameterInfo_flags_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_OptInputParameterInfo ##############

package Finance::TA::TA_OptInputParameterInfo;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_type_get = *Finance::TAc::TA_OptInputParameterInfo_type_get;
*swig_type_set = *Finance::TAc::TA_OptInputParameterInfo_type_set;
*swig_paramName_get = *Finance::TAc::TA_OptInputParameterInfo_paramName_get;
*swig_paramName_set = *Finance::TAc::TA_OptInputParameterInfo_paramName_set;
*swig_flags_get = *Finance::TAc::TA_OptInputParameterInfo_flags_get;
*swig_flags_set = *Finance::TAc::TA_OptInputParameterInfo_flags_set;
*swig_displayName_get = *Finance::TAc::TA_OptInputParameterInfo_displayName_get;
*swig_displayName_set = *Finance::TAc::TA_OptInputParameterInfo_displayName_set;
*swig_dataSet_get = *Finance::TAc::TA_OptInputParameterInfo_dataSet_get;
*swig_dataSet_set = *Finance::TAc::TA_OptInputParameterInfo_dataSet_set;
*swig_defaultValue_get = *Finance::TAc::TA_OptInputParameterInfo_defaultValue_get;
*swig_defaultValue_set = *Finance::TAc::TA_OptInputParameterInfo_defaultValue_set;
*swig_hint_get = *Finance::TAc::TA_OptInputParameterInfo_hint_get;
*swig_hint_set = *Finance::TAc::TA_OptInputParameterInfo_hint_set;
*swig_helpFile_get = *Finance::TAc::TA_OptInputParameterInfo_helpFile_get;
*swig_helpFile_set = *Finance::TAc::TA_OptInputParameterInfo_helpFile_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Finance::TA::TA_OutputParameterInfo ##############

package Finance::TA::TA_OutputParameterInfo;
@ISA = qw( Finance::TA );
our %OWNER = ();
our %ITERATORS = ();
*swig_type_get = *Finance::TAc::TA_OutputParameterInfo_type_get;
*swig_type_set = *Finance::TAc::TA_OutputParameterInfo_type_set;
*swig_paramName_get = *Finance::TAc::TA_OutputParameterInfo_paramName_get;
*swig_paramName_set = *Finance::TAc::TA_OutputParameterInfo_paramName_set;
*swig_flags_get = *Finance::TAc::TA_OutputParameterInfo_flags_get;
*swig_flags_set = *Finance::TAc::TA_OutputParameterInfo_flags_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Finance::TA;

*TA_INTEGER_MIN = *Finance::TAc::TA_INTEGER_MIN;
*TA_INTEGER_MAX = *Finance::TAc::TA_INTEGER_MAX;
*TA_REAL_MIN = *Finance::TAc::TA_REAL_MIN;
*TA_REAL_MAX = *Finance::TAc::TA_REAL_MAX;
*TA_INTEGER_DEFAULT = *Finance::TAc::TA_INTEGER_DEFAULT;
*TA_REAL_DEFAULT = *Finance::TAc::TA_REAL_DEFAULT;
*TA_SUCCESS = *Finance::TAc::TA_SUCCESS;
*TA_LIB_NOT_INITIALIZE = *Finance::TAc::TA_LIB_NOT_INITIALIZE;
*TA_BAD_PARAM = *Finance::TAc::TA_BAD_PARAM;
*TA_ALLOC_ERR = *Finance::TAc::TA_ALLOC_ERR;
*TA_ACCESS_FAILED = *Finance::TAc::TA_ACCESS_FAILED;
*TA_NO_DATA_SOURCE = *Finance::TAc::TA_NO_DATA_SOURCE;
*TA_SYMBOL_NOT_FOUND = *Finance::TAc::TA_SYMBOL_NOT_FOUND;
*TA_CATEGORY_NOT_FOUND = *Finance::TAc::TA_CATEGORY_NOT_FOUND;
*TA_KEY_NOT_FOUND = *Finance::TAc::TA_KEY_NOT_FOUND;
*TA_INDEX_FILE_NOT_ACCESSIBLE = *Finance::TAc::TA_INDEX_FILE_NOT_ACCESSIBLE;
*TA_INDEX_NOT_VALID = *Finance::TAc::TA_INDEX_NOT_VALID;
*TA_INVALID_FIELD = *Finance::TAc::TA_INVALID_FIELD;
*TA_INVALID_PATH = *Finance::TAc::TA_INVALID_PATH;
*TA_INTERNAL_ERR = *Finance::TAc::TA_INTERNAL_ERR;
*TA_FATAL_ERR = *Finance::TAc::TA_FATAL_ERR;
*TA_NO_NEW_DATA = *Finance::TAc::TA_NO_NEW_DATA;
*TA_NOT_SUPPORTED = *Finance::TAc::TA_NOT_SUPPORTED;
*TA_END_OF_INDEX = *Finance::TAc::TA_END_OF_INDEX;
*TA_ENOUGH_DATA = *Finance::TAc::TA_ENOUGH_DATA;
*TA_MISSING_FIELD = *Finance::TAc::TA_MISSING_FIELD;
*TA_REDUNDANT_FIELD = *Finance::TAc::TA_REDUNDANT_FIELD;
*TA_INVALID_DATE = *Finance::TAc::TA_INVALID_DATE;
*TA_INVALID_PRICE = *Finance::TAc::TA_INVALID_PRICE;
*TA_GROUP_NOT_FOUND = *Finance::TAc::TA_GROUP_NOT_FOUND;
*TA_FUNC_NOT_FOUND = *Finance::TAc::TA_FUNC_NOT_FOUND;
*TA_INVALID_HANDLE = *Finance::TAc::TA_INVALID_HANDLE;
*TA_INVALID_PARAM_HOLDER = *Finance::TAc::TA_INVALID_PARAM_HOLDER;
*TA_INVALID_PARAM_HOLDER_TYPE = *Finance::TAc::TA_INVALID_PARAM_HOLDER_TYPE;
*TA_INVALID_PARAM_FUNCTION = *Finance::TAc::TA_INVALID_PARAM_FUNCTION;
*TA_INPUT_NOT_ALL_INITIALIZE = *Finance::TAc::TA_INPUT_NOT_ALL_INITIALIZE;
*TA_OUTPUT_NOT_ALL_INITIALIZE = *Finance::TAc::TA_OUTPUT_NOT_ALL_INITIALIZE;
*TA_OUT_OF_RANGE_START_INDEX = *Finance::TAc::TA_OUT_OF_RANGE_START_INDEX;
*TA_OUT_OF_RANGE_END_INDEX = *Finance::TAc::TA_OUT_OF_RANGE_END_INDEX;
*TA_BAD_OBJECT = *Finance::TAc::TA_BAD_OBJECT;
*TA_MEM_LEAK = *Finance::TAc::TA_MEM_LEAK;
*TA_ADDR_NOT_FOUND = *Finance::TAc::TA_ADDR_NOT_FOUND;
*TA_SOCKET_LIB_INIT_ERR = *Finance::TAc::TA_SOCKET_LIB_INIT_ERR;
*TA_END_OF_STREAM = *Finance::TAc::TA_END_OF_STREAM;
*TA_BAD_STREAM_CRC = *Finance::TAc::TA_BAD_STREAM_CRC;
*TA_UNSUPPORTED_STREAM_VERSION = *Finance::TAc::TA_UNSUPPORTED_STREAM_VERSION;
*TA_BAD_STREAM_HEADER_CRC = *Finance::TAc::TA_BAD_STREAM_HEADER_CRC;
*TA_BAD_STREAM_HEADER = *Finance::TAc::TA_BAD_STREAM_HEADER;
*TA_BAD_STREAM_CONTENT = *Finance::TAc::TA_BAD_STREAM_CONTENT;
*TA_BAD_YAHOO_IDX_HDR = *Finance::TAc::TA_BAD_YAHOO_IDX_HDR;
*TA_UNSUPORTED_YAHOO_IDX_VERSION = *Finance::TAc::TA_UNSUPORTED_YAHOO_IDX_VERSION;
*TA_BAD_YAHOO_IDX_INDICATOR_AF = *Finance::TAc::TA_BAD_YAHOO_IDX_INDICATOR_AF;
*TA_BAD_YAHOO_IDX_INDICATOR_EB = *Finance::TAc::TA_BAD_YAHOO_IDX_INDICATOR_EB;
*TA_BAD_YAHOO_IDX_INDICATOR_F2 = *Finance::TAc::TA_BAD_YAHOO_IDX_INDICATOR_F2;
*TA_NO_INTERNET_CONNECTION = *Finance::TAc::TA_NO_INTERNET_CONNECTION;
*TA_INTERNET_ACCESS_FAILED = *Finance::TAc::TA_INTERNET_ACCESS_FAILED;
*TA_INTERNET_OPEN_FAILED = *Finance::TAc::TA_INTERNET_OPEN_FAILED;
*TA_INTERNET_NOT_OPEN_TRY_AGAIN = *Finance::TAc::TA_INTERNET_NOT_OPEN_TRY_AGAIN;
*TA_INTERNET_SERVER_CONNECT_FAILED = *Finance::TAc::TA_INTERNET_SERVER_CONNECT_FAILED;
*TA_INTERNET_OPEN_REQUEST_FAILED = *Finance::TAc::TA_INTERNET_OPEN_REQUEST_FAILED;
*TA_INTERNET_SEND_REQUEST_FAILED = *Finance::TAc::TA_INTERNET_SEND_REQUEST_FAILED;
*TA_INTERNET_READ_DATA_FAILED = *Finance::TAc::TA_INTERNET_READ_DATA_FAILED;
*TA_UNSUPPORTED_COUNTRY = *Finance::TAc::TA_UNSUPPORTED_COUNTRY;
*TA_BAD_HTML_SYNTAX = *Finance::TAc::TA_BAD_HTML_SYNTAX;
*TA_PERIOD_NOT_AVAILABLE = *Finance::TAc::TA_PERIOD_NOT_AVAILABLE;
*TA_FINISH_TABLE = *Finance::TAc::TA_FINISH_TABLE;
*TA_INVALID_SECURITY_EXCHANGE = *Finance::TAc::TA_INVALID_SECURITY_EXCHANGE;
*TA_INVALID_SECURITY_SYMBOL = *Finance::TAc::TA_INVALID_SECURITY_SYMBOL;
*TA_INVALID_SECURITY_COUNTRY = *Finance::TAc::TA_INVALID_SECURITY_COUNTRY;
*TA_INVALID_SECURITY_TYPE = *Finance::TAc::TA_INVALID_SECURITY_TYPE;
*TA_MISSING_DATE_OR_TIME_FIELD = *Finance::TAc::TA_MISSING_DATE_OR_TIME_FIELD;
*TA_OBJECT_NOT_EQUAL = *Finance::TAc::TA_OBJECT_NOT_EQUAL;
*TA_INVALID_LIST_TYPE = *Finance::TAc::TA_INVALID_LIST_TYPE;
*TA_YAHOO_IDX_EXPIRED = *Finance::TAc::TA_YAHOO_IDX_EXPIRED;
*TA_YAHOO_IDX_UNAVAILABLE_1 = *Finance::TAc::TA_YAHOO_IDX_UNAVAILABLE_1;
*TA_YAHOO_IDX_FAILED = *Finance::TAc::TA_YAHOO_IDX_FAILED;
*TA_LIBCURL_GLOBAL_INIT_FAILED = *Finance::TAc::TA_LIBCURL_GLOBAL_INIT_FAILED;
*TA_LIBCURL_INIT_FAILED = *Finance::TAc::TA_LIBCURL_INIT_FAILED;
*TA_INSTRUMENT_ID_BAD = *Finance::TAc::TA_INSTRUMENT_ID_BAD;
*TA_TRADE_LOG_NOT_INITIALIZED = *Finance::TAc::TA_TRADE_LOG_NOT_INITIALIZED;
*TA_BAD_TRADE_TYPE = *Finance::TAc::TA_BAD_TRADE_TYPE;
*TA_BAD_START_DATE = *Finance::TAc::TA_BAD_START_DATE;
*TA_BAD_END_DATE = *Finance::TAc::TA_BAD_END_DATE;
*TA_INTERNET_SET_RX_TIMEOUT_FAILED = *Finance::TAc::TA_INTERNET_SET_RX_TIMEOUT_FAILED;
*TA_NO_TRADE_LOG = *Finance::TAc::TA_NO_TRADE_LOG;
*TA_ENTRY_TRANSACTION_MISSING = *Finance::TAc::TA_ENTRY_TRANSACTION_MISSING;
*TA_INVALID_VALUE_ID = *Finance::TAc::TA_INVALID_VALUE_ID;
*TA_BAD_STARTING_CAPITAL = *Finance::TAc::TA_BAD_STARTING_CAPITAL;
*TA_TRADELOG_ALREADY_ADDED = *Finance::TAc::TA_TRADELOG_ALREADY_ADDED;
*TA_YAHOO_IDX_UNAVAILABLE_2 = *Finance::TAc::TA_YAHOO_IDX_UNAVAILABLE_2;
*TA_YAHOO_IDX_UNAVAILABLE_3 = *Finance::TAc::TA_YAHOO_IDX_UNAVAILABLE_3;
*TA_NO_WEEKDAY_IN_DATE_RANGE = *Finance::TAc::TA_NO_WEEKDAY_IN_DATE_RANGE;
*TA_VALUE_NOT_APPLICABLE = *Finance::TAc::TA_VALUE_NOT_APPLICABLE;
*TA_DATA_GAP = *Finance::TAc::TA_DATA_GAP;
*TA_NOT_IMPLEMENTED = *Finance::TAc::TA_NOT_IMPLEMENTED;
*TA_PM_REFERENCE_EXIST = *Finance::TAc::TA_PM_REFERENCE_EXIST;
*TA_PRICE_BAR_CONTAINS_ZERO = *Finance::TAc::TA_PRICE_BAR_CONTAINS_ZERO;
*TA_MISSING_CLOSE_PRICE_FIELD = *Finance::TAc::TA_MISSING_CLOSE_PRICE_FIELD;
*TA_UNSUPPORTED_REPLACE_ZERO_PRICE_BAR = *Finance::TAc::TA_UNSUPPORTED_REPLACE_ZERO_PRICE_BAR;
*TA_MISSING_INPUT_DIGITS = *Finance::TAc::TA_MISSING_INPUT_DIGITS;
*TA_DICT_TYPE_MISMATCH = *Finance::TAc::TA_DICT_TYPE_MISMATCH;
*TA_YAHOO_IDX_UNAVAILABLE_4 = *Finance::TAc::TA_YAHOO_IDX_UNAVAILABLE_4;
*TA_OBSOLETED_SYMBOL = *Finance::TAc::TA_OBSOLETED_SYMBOL;
*TA_BAD_QUERY = *Finance::TAc::TA_BAD_QUERY;
*TA_UNSUPPORTED_DO_NOT_SPLIT_ADJUST = *Finance::TAc::TA_UNSUPPORTED_DO_NOT_SPLIT_ADJUST;
*TA_UNSUPPORTED_DO_NOT_VALUE_ADJUST = *Finance::TAc::TA_UNSUPPORTED_DO_NOT_VALUE_ADJUST;
*TA_MISSING_PRICE_FOR_ADJUSTMENT = *Finance::TAc::TA_MISSING_PRICE_FOR_ADJUSTMENT;
*TA_INVALID_DATABASE_TYPE = *Finance::TAc::TA_INVALID_DATABASE_TYPE;
*TA_UNEXPECTED_SQL_TYPE = *Finance::TAc::TA_UNEXPECTED_SQL_TYPE;
*TA_UNEXPECTED_SQL_TYPE_FOR_OPEN = *Finance::TAc::TA_UNEXPECTED_SQL_TYPE_FOR_OPEN;
*TA_UNEXPECTED_SQL_TYPE_FOR_HIGH = *Finance::TAc::TA_UNEXPECTED_SQL_TYPE_FOR_HIGH;
*TA_UNEXPECTED_SQL_TYPE_FOR_LOW = *Finance::TAc::TA_UNEXPECTED_SQL_TYPE_FOR_LOW;
*TA_UNEXPECTED_SQL_TYPE_FOR_CLOSE = *Finance::TAc::TA_UNEXPECTED_SQL_TYPE_FOR_CLOSE;
*TA_UNEXPECTED_SQL_TYPE_FOR_VOLUME = *Finance::TAc::TA_UNEXPECTED_SQL_TYPE_FOR_VOLUME;
*TA_UNEXPECTED_SQL_TYPE_FOR_OI = *Finance::TAc::TA_UNEXPECTED_SQL_TYPE_FOR_OI;
*TA_LIMIT_OF_ONE_SERVER_EXCEEDED = *Finance::TAc::TA_LIMIT_OF_ONE_SERVER_EXCEEDED;
*TA_LIMIT_OF_ONE_COUNTRY_ID_EXCEEDED = *Finance::TAc::TA_LIMIT_OF_ONE_COUNTRY_ID_EXCEEDED;
*TA_INVALID_YAHOO_DIVIDEND = *Finance::TAc::TA_INVALID_YAHOO_DIVIDEND;
*TA_LOCATION_PARAM_INVALID = *Finance::TAc::TA_LOCATION_PARAM_INVALID;
*TA_DATA_ERROR_VOLUME_IS_NEGATIVE = *Finance::TAc::TA_DATA_ERROR_VOLUME_IS_NEGATIVE;
*TA_DATA_ERROR_TIMESTAMP_ORDER = *Finance::TAc::TA_DATA_ERROR_TIMESTAMP_ORDER;
*TA_DATA_ERROR_OI_IS_NEGATIVE = *Finance::TAc::TA_DATA_ERROR_OI_IS_NEGATIVE;
*TA_DATA_ERROR_CLOSE_IS_NEGATIVE = *Finance::TAc::TA_DATA_ERROR_CLOSE_IS_NEGATIVE;
*TA_DATA_ERROR_OPEN_IS_NEGATIVE = *Finance::TAc::TA_DATA_ERROR_OPEN_IS_NEGATIVE;
*TA_DATA_ERROR_HIGH_IS_NEGATIVE = *Finance::TAc::TA_DATA_ERROR_HIGH_IS_NEGATIVE;
*TA_DATA_ERROR_LOW_IS_NEGATIVE = *Finance::TAc::TA_DATA_ERROR_LOW_IS_NEGATIVE;
*TA_DATA_ERROR_LOW_EXCEED_HIGH = *Finance::TAc::TA_DATA_ERROR_LOW_EXCEED_HIGH;
*TA_DATA_ERROR_OPEN_EXCEED_HIGH = *Finance::TAc::TA_DATA_ERROR_OPEN_EXCEED_HIGH;
*TA_DATA_ERROR_OPEN_BELOW_LOW = *Finance::TAc::TA_DATA_ERROR_OPEN_BELOW_LOW;
*TA_DATA_ERROR_CLOSE_EXCEED_HIGH = *Finance::TAc::TA_DATA_ERROR_CLOSE_EXCEED_HIGH;
*TA_DATA_ERROR_CLOSE_BELOW_LOW = *Finance::TAc::TA_DATA_ERROR_CLOSE_BELOW_LOW;
*TA_INTERNET_NO_CONTENT = *Finance::TAc::TA_INTERNET_NO_CONTENT;
*TA_IP_NOSOCKETS = *Finance::TAc::TA_IP_NOSOCKETS;
*TA_IP_BADHOST = *Finance::TAc::TA_IP_BADHOST;
*TA_IP_BADSERVICE = *Finance::TAc::TA_IP_BADSERVICE;
*TA_IP_BADPROTOCOL = *Finance::TAc::TA_IP_BADPROTOCOL;
*TA_IP_SOCKETERROR = *Finance::TAc::TA_IP_SOCKETERROR;
*TA_IP_CONNECTERROR = *Finance::TAc::TA_IP_CONNECTERROR;
*TA_IP_BINDERROR = *Finance::TAc::TA_IP_BINDERROR;
*TA_IP_LISTENERROR = *Finance::TAc::TA_IP_LISTENERROR;
*TA_IP_WRITE_ERROR = *Finance::TAc::TA_IP_WRITE_ERROR;
*TA_IP_READ_ERROR = *Finance::TAc::TA_IP_READ_ERROR;
*TA_IP_UNKNOWN_ERR = *Finance::TAc::TA_IP_UNKNOWN_ERR;
*TA_HTTP_NO_HEADER = *Finance::TAc::TA_HTTP_NO_HEADER;
*TA_HTTP_SC_301 = *Finance::TAc::TA_HTTP_SC_301;
*TA_HTTP_SC_302 = *Finance::TAc::TA_HTTP_SC_302;
*TA_HTTP_SC_304 = *Finance::TAc::TA_HTTP_SC_304;
*TA_HTTP_SC_400 = *Finance::TAc::TA_HTTP_SC_400;
*TA_HTTP_SC_401 = *Finance::TAc::TA_HTTP_SC_401;
*TA_HTTP_SC_403 = *Finance::TAc::TA_HTTP_SC_403;
*TA_HTTP_SC_404 = *Finance::TAc::TA_HTTP_SC_404;
*TA_HTTP_SC_500 = *Finance::TAc::TA_HTTP_SC_500;
*TA_HTTP_SC_501 = *Finance::TAc::TA_HTTP_SC_501;
*TA_HTTP_SC_502 = *Finance::TAc::TA_HTTP_SC_502;
*TA_HTTP_SC_503 = *Finance::TAc::TA_HTTP_SC_503;
*TA_HTTP_SC_UNKNOWN = *Finance::TAc::TA_HTTP_SC_UNKNOWN;
*TA_CSI_UNABLE_OPEN_QMASTER_FILE = *Finance::TAc::TA_CSI_UNABLE_OPEN_QMASTER_FILE;
*TA_CSI_QMASTER_READ_ERROR = *Finance::TAc::TA_CSI_QMASTER_READ_ERROR;
*TA_CSI_QMASTER_BAD_PERIOD = *Finance::TAc::TA_CSI_QMASTER_BAD_PERIOD;
*TA_CSI_QMASTER_INVALID_STOCKCOM_FIELD = *Finance::TAc::TA_CSI_QMASTER_INVALID_STOCKCOM_FIELD;
*TA_CSI_QMASTER_INVALID_DELETED_FIELD = *Finance::TAc::TA_CSI_QMASTER_INVALID_DELETED_FIELD;
*TA_CSI_QMASTER_INVALID_PUTCALL_FIELD = *Finance::TAc::TA_CSI_QMASTER_INVALID_PUTCALL_FIELD;
*TA_CSI_UNABLE_OPEN_QMASTER2_FILE = *Finance::TAc::TA_CSI_UNABLE_OPEN_QMASTER2_FILE;
*TA_CSI_QMASTER2_READ_ERROR = *Finance::TAc::TA_CSI_QMASTER2_READ_ERROR;
*TA_CSI_QMASTER2_BAD_PERIOD = *Finance::TAc::TA_CSI_QMASTER2_BAD_PERIOD;
*TA_CSI_QMASTER2_INVALID_STOCKCOM_FIELD = *Finance::TAc::TA_CSI_QMASTER2_INVALID_STOCKCOM_FIELD;
*TA_CSI_QMASTER2_INVALID_DELETED_FIELD = *Finance::TAc::TA_CSI_QMASTER2_INVALID_DELETED_FIELD;
*TA_CSI_UNKNOWN_QMASTER_VERSION = *Finance::TAc::TA_CSI_UNKNOWN_QMASTER_VERSION;
*TA_CSI_DATA_FILE_HEADER_READ_ERROR = *Finance::TAc::TA_CSI_DATA_FILE_HEADER_READ_ERROR;
*TA_CSI_DATA_FILE_READ_ERROR = *Finance::TAc::TA_CSI_DATA_FILE_READ_ERROR;
*TA_CSI_DATA_FILE_HEADER_READ_ERROR_2 = *Finance::TAc::TA_CSI_DATA_FILE_HEADER_READ_ERROR_2;
*TA_CSI_DATA_FILE_READ_ERROR_2 = *Finance::TAc::TA_CSI_DATA_FILE_READ_ERROR_2;
*TA_CSI_UNKNOWN_DATA_FILE_VERSION = *Finance::TAc::TA_CSI_UNKNOWN_DATA_FILE_VERSION;
*TA_CSI_DATA_FILE_MISSING = *Finance::TAc::TA_CSI_DATA_FILE_MISSING;
*TA_CSI_DATA_FILE_ACCESS_FAILED = *Finance::TAc::TA_CSI_DATA_FILE_ACCESS_FAILED;
*TA_CSI_MASTER_FILE_NOT_FOUND = *Finance::TAc::TA_CSI_MASTER_FILE_NOT_FOUND;
*TA_CSI_MASTER_FILE_ACCESS_FAILED = *Finance::TAc::TA_CSI_MASTER_FILE_ACCESS_FAILED;
*TA_CSI_MASTER_BAD_PERIOD = *Finance::TAc::TA_CSI_MASTER_BAD_PERIOD;
*TA_CSI_MISSING_CSIM_DATA_FILE = *Finance::TAc::TA_CSI_MISSING_CSIM_DATA_FILE;
*TA_CSI_FAIL_TO_OPEN_CSIM_DATA_FILE = *Finance::TAc::TA_CSI_FAIL_TO_OPEN_CSIM_DATA_FILE;
*TA_CSI_READ_FAIL_CSIM_HEADER_FILE = *Finance::TAc::TA_CSI_READ_FAIL_CSIM_HEADER_FILE;
*TA_CSI_READ_FAIL_CSIM_DATA_FILE = *Finance::TAc::TA_CSI_READ_FAIL_CSIM_DATA_FILE;
*TA_CSI_HEADER_READ_FAILED_CSIM = *Finance::TAc::TA_CSI_HEADER_READ_FAILED_CSIM;
*TA_CSI_UNABLE_FIND_QMASTER_FILE = *Finance::TAc::TA_CSI_UNABLE_FIND_QMASTER_FILE;
*TA_INTERNAL_ERROR = *Finance::TAc::TA_INTERNAL_ERROR;
*TA_UNKNOWN_ERR = *Finance::TAc::TA_UNKNOWN_ERR;
*TA_COMPATIBILITY_DEFAULT = *Finance::TAc::TA_COMPATIBILITY_DEFAULT;
*TA_COMPATIBILITY_METASTOCK = *Finance::TAc::TA_COMPATIBILITY_METASTOCK;
*TA_MAType_SMA = *Finance::TAc::TA_MAType_SMA;
*TA_MAType_EMA = *Finance::TAc::TA_MAType_EMA;
*TA_MAType_WMA = *Finance::TAc::TA_MAType_WMA;
*TA_MAType_DEMA = *Finance::TAc::TA_MAType_DEMA;
*TA_MAType_TEMA = *Finance::TAc::TA_MAType_TEMA;
*TA_MAType_TRIMA = *Finance::TAc::TA_MAType_TRIMA;
*TA_MAType_KAMA = *Finance::TAc::TA_MAType_KAMA;
*TA_MAType_MAMA = *Finance::TAc::TA_MAType_MAMA;
*TA_MAType_T3 = *Finance::TAc::TA_MAType_T3;
*TA_FUNC_UNST_EMA = *Finance::TAc::TA_FUNC_UNST_EMA;
*TA_FUNC_UNST_HT_TRENDLINE = *Finance::TAc::TA_FUNC_UNST_HT_TRENDLINE;
*TA_FUNC_UNST_KAMA = *Finance::TAc::TA_FUNC_UNST_KAMA;
*TA_FUNC_UNST_MAMA = *Finance::TAc::TA_FUNC_UNST_MAMA;
*TA_FUNC_UNST_T3 = *Finance::TAc::TA_FUNC_UNST_T3;
*TA_FUNC_UNST_ATR = *Finance::TAc::TA_FUNC_UNST_ATR;
*TA_FUNC_UNST_ADX = *Finance::TAc::TA_FUNC_UNST_ADX;
*TA_FUNC_UNST_ADXR = *Finance::TAc::TA_FUNC_UNST_ADXR;
*TA_FUNC_UNST_DX = *Finance::TAc::TA_FUNC_UNST_DX;
*TA_FUNC_UNST_MFI = *Finance::TAc::TA_FUNC_UNST_MFI;
*TA_FUNC_UNST_MINUS_DI = *Finance::TAc::TA_FUNC_UNST_MINUS_DI;
*TA_FUNC_UNST_MINUS_DM = *Finance::TAc::TA_FUNC_UNST_MINUS_DM;
*TA_FUNC_UNST_PLUS_DI = *Finance::TAc::TA_FUNC_UNST_PLUS_DI;
*TA_FUNC_UNST_PLUS_DM = *Finance::TAc::TA_FUNC_UNST_PLUS_DM;
*TA_FUNC_UNST_RSI = *Finance::TAc::TA_FUNC_UNST_RSI;
*TA_FUNC_UNST_STOCHRSI = *Finance::TAc::TA_FUNC_UNST_STOCHRSI;
*TA_FUNC_UNST_HT_DCPERIOD = *Finance::TAc::TA_FUNC_UNST_HT_DCPERIOD;
*TA_FUNC_UNST_HT_DCPHASE = *Finance::TAc::TA_FUNC_UNST_HT_DCPHASE;
*TA_FUNC_UNST_HT_PHASOR = *Finance::TAc::TA_FUNC_UNST_HT_PHASOR;
*TA_FUNC_UNST_HT_SINE = *Finance::TAc::TA_FUNC_UNST_HT_SINE;
*TA_FUNC_UNST_HT_TRENDMODE = *Finance::TAc::TA_FUNC_UNST_HT_TRENDMODE;
*TA_FUNC_UNST_ALL = *Finance::TAc::TA_FUNC_UNST_ALL;
*TA_FUNC_UNST_NONE = *Finance::TAc::TA_FUNC_UNST_NONE;
*TA_RangeType_RealBody = *Finance::TAc::TA_RangeType_RealBody;
*TA_RangeType_HighLow = *Finance::TAc::TA_RangeType_HighLow;
*TA_RangeType_Shadows = *Finance::TAc::TA_RangeType_Shadows;
*TA_BodyLong = *Finance::TAc::TA_BodyLong;
*TA_BodyVeryLong = *Finance::TAc::TA_BodyVeryLong;
*TA_BodyShort = *Finance::TAc::TA_BodyShort;
*TA_BodyDoji = *Finance::TAc::TA_BodyDoji;
*TA_ShadowLong = *Finance::TAc::TA_ShadowLong;
*TA_ShadowVeryLong = *Finance::TAc::TA_ShadowVeryLong;
*TA_ShadowShort = *Finance::TAc::TA_ShadowShort;
*TA_ShadowVeryShort = *Finance::TAc::TA_ShadowVeryShort;
*TA_Near = *Finance::TAc::TA_Near;
*TA_Far = *Finance::TAc::TA_Far;
*TA_Equal = *Finance::TAc::TA_Equal;
*TA_AllCandleSettings = *Finance::TAc::TA_AllCandleSettings;
*TA_1SEC = *Finance::TAc::TA_1SEC;
*TA_2SECS = *Finance::TAc::TA_2SECS;
*TA_3SECS = *Finance::TAc::TA_3SECS;
*TA_4SECS = *Finance::TAc::TA_4SECS;
*TA_5SECS = *Finance::TAc::TA_5SECS;
*TA_6SECS = *Finance::TAc::TA_6SECS;
*TA_10SECS = *Finance::TAc::TA_10SECS;
*TA_12SECS = *Finance::TAc::TA_12SECS;
*TA_15SECS = *Finance::TAc::TA_15SECS;
*TA_20SECS = *Finance::TAc::TA_20SECS;
*TA_30SECS = *Finance::TAc::TA_30SECS;
*TA_1MIN = *Finance::TAc::TA_1MIN;
*TA_2MINS = *Finance::TAc::TA_2MINS;
*TA_3MINS = *Finance::TAc::TA_3MINS;
*TA_4MINS = *Finance::TAc::TA_4MINS;
*TA_5MINS = *Finance::TAc::TA_5MINS;
*TA_6MINS = *Finance::TAc::TA_6MINS;
*TA_10MINS = *Finance::TAc::TA_10MINS;
*TA_12MINS = *Finance::TAc::TA_12MINS;
*TA_15MINS = *Finance::TAc::TA_15MINS;
*TA_20MINS = *Finance::TAc::TA_20MINS;
*TA_30MINS = *Finance::TAc::TA_30MINS;
*TA_1HOUR = *Finance::TAc::TA_1HOUR;
*TA_2HOURS = *Finance::TAc::TA_2HOURS;
*TA_3HOURS = *Finance::TAc::TA_3HOURS;
*TA_4HOURS = *Finance::TAc::TA_4HOURS;
*TA_6HOURS = *Finance::TAc::TA_6HOURS;
*TA_8HOURS = *Finance::TAc::TA_8HOURS;
*TA_12HOURS = *Finance::TAc::TA_12HOURS;
*TA_DAILY = *Finance::TAc::TA_DAILY;
*TA_WEEKLY = *Finance::TAc::TA_WEEKLY;
*TA_MONTHLY = *Finance::TAc::TA_MONTHLY;
*TA_QUARTERLY = *Finance::TAc::TA_QUARTERLY;
*TA_YEARLY = *Finance::TAc::TA_YEARLY;
*TA_SUNDAY = *Finance::TAc::TA_SUNDAY;
*TA_MONDAY = *Finance::TAc::TA_MONDAY;
*TA_TUESDAY = *Finance::TAc::TA_TUESDAY;
*TA_WEDNESDAY = *Finance::TAc::TA_WEDNESDAY;
*TA_THURSDAY = *Finance::TAc::TA_THURSDAY;
*TA_FRIDAY = *Finance::TAc::TA_FRIDAY;
*TA_SATURDAY = *Finance::TAc::TA_SATURDAY;
*TA_FATAL_ERROR_BUF_SIZE = *Finance::TAc::TA_FATAL_ERROR_BUF_SIZE;
*TA_REG_TEST_FATAL_ERROR = *Finance::TAc::TA_REG_TEST_FATAL_ERROR;
*TA_REG_TEST_ASSERT_FAIL = *Finance::TAc::TA_REG_TEST_ASSERT_FAIL;
*TA_NB_REGRESSION_TEST_ID = *Finance::TAc::TA_NB_REGRESSION_TEST_ID;
*TA_SOURCELOCATION_MAX_LENGTH = *Finance::TAc::TA_SOURCELOCATION_MAX_LENGTH;
*TA_SOURCEINFO_MAX_LENGTH = *Finance::TAc::TA_SOURCEINFO_MAX_LENGTH;
*TA_CATEGORY_MAX_LENGTH = *Finance::TAc::TA_CATEGORY_MAX_LENGTH;
*TA_SYMBOL_MAX_LENGTH = *Finance::TAc::TA_SYMBOL_MAX_LENGTH;
*TA_CAT_COUNTRY_MAX_LENGTH = *Finance::TAc::TA_CAT_COUNTRY_MAX_LENGTH;
*TA_CAT_EXCHANGE_MAX_LENGTH = *Finance::TAc::TA_CAT_EXCHANGE_MAX_LENGTH;
*TA_CAT_TYPE_MAX_LENGTH = *Finance::TAc::TA_CAT_TYPE_MAX_LENGTH;
*TA_DEFAULT_CATEGORY = *Finance::TAc::TA_DEFAULT_CATEGORY;
*TA_DEFAULT_CATEGORY_COUNTRY = *Finance::TAc::TA_DEFAULT_CATEGORY_COUNTRY;
*TA_DEFAULT_CATEGORY_EXCHANGE = *Finance::TAc::TA_DEFAULT_CATEGORY_EXCHANGE;
*TA_DEFAULT_CATEGORY_TYPE = *Finance::TAc::TA_DEFAULT_CATEGORY_TYPE;
*TA_ASCII_FILE = *Finance::TAc::TA_ASCII_FILE;
*TA_SIMULATOR = *Finance::TAc::TA_SIMULATOR;
*TA_YAHOO_WEB = *Finance::TAc::TA_YAHOO_WEB;
*TA_SQL = *Finance::TAc::TA_SQL;
*TA_CSI = *Finance::TAc::TA_CSI;
*TA_CSIM = *Finance::TAc::TA_CSIM;
*TA_YAHOO_ONE_SYMBOL = *Finance::TAc::TA_YAHOO_ONE_SYMBOL;
*TA_NUM_OF_SOURCE_ID = *Finance::TAc::TA_NUM_OF_SOURCE_ID;
*TA_NO_FLAGS = *Finance::TAc::TA_NO_FLAGS;
*TA_REPLACE_ZERO_PRICE_BAR = *Finance::TAc::TA_REPLACE_ZERO_PRICE_BAR;
*TA_DO_NOT_SPLIT_ADJUST = *Finance::TAc::TA_DO_NOT_SPLIT_ADJUST;
*TA_DO_NOT_VALUE_ADJUST = *Finance::TAc::TA_DO_NOT_VALUE_ADJUST;
*TA_DOHLCV = *Finance::TAc::TA_DOHLCV;
*TA_DOCHLV = *Finance::TAc::TA_DOCHLV;
*TA_DOCV = *Finance::TAc::TA_DOCV;
*TA_DCV = *Finance::TAc::TA_DCV;
*TA_ALL = *Finance::TAc::TA_ALL;
*TA_OPEN = *Finance::TAc::TA_OPEN;
*TA_HIGH = *Finance::TAc::TA_HIGH;
*TA_LOW = *Finance::TAc::TA_LOW;
*TA_CLOSE = *Finance::TAc::TA_CLOSE;
*TA_VOLUME = *Finance::TAc::TA_VOLUME;
*TA_OPENINTEREST = *Finance::TAc::TA_OPENINTEREST;
*TA_TIMESTAMP = *Finance::TAc::TA_TIMESTAMP;
*TA_ALLOW_INCOMPLETE_PRICE_BARS = *Finance::TAc::TA_ALLOW_INCOMPLETE_PRICE_BARS;
*TA_USE_TOTAL_VOLUME = *Finance::TAc::TA_USE_TOTAL_VOLUME;
*TA_USE_TOTAL_OPENINTEREST = *Finance::TAc::TA_USE_TOTAL_OPENINTEREST;
*TA_DISABLE_PRICE_VALIDATION = *Finance::TAc::TA_DISABLE_PRICE_VALIDATION;
*TA_REPORT_SYMBOL = *Finance::TAc::TA_REPORT_SYMBOL;
*TA_REPORT_CATEGORY = *Finance::TAc::TA_REPORT_CATEGORY;
*TA_REPORT_SOURCE = *Finance::TAc::TA_REPORT_SOURCE;
*TA_REPORT_TOTAL = *Finance::TAc::TA_REPORT_TOTAL;
*TA_LONG_ENTRY = *Finance::TAc::TA_LONG_ENTRY;
*TA_LONG_EXIT = *Finance::TAc::TA_LONG_EXIT;
*TA_SHORT_ENTRY = *Finance::TAc::TA_SHORT_ENTRY;
*TA_SHORT_EXIT = *Finance::TAc::TA_SHORT_EXIT;
*TA_NB_TRADE_TYPE = *Finance::TAc::TA_NB_TRADE_TYPE;
*TA_PM_LONG_TRADES = *Finance::TAc::TA_PM_LONG_TRADES;
*TA_PM_SHORT_TRADES = *Finance::TAc::TA_PM_SHORT_TRADES;
*TA_PM_ALL_TRADES = *Finance::TAc::TA_PM_ALL_TRADES;
*TA_PM_NB_GROUP = *Finance::TAc::TA_PM_NB_GROUP;
*TA_PM_TOTAL_NB_OF_TRADE = *Finance::TAc::TA_PM_TOTAL_NB_OF_TRADE;
*TA_PM_STARTING_CAPITAL = *Finance::TAc::TA_PM_STARTING_CAPITAL;
*TA_PM_ENDING_CAPITAL = *Finance::TAc::TA_PM_ENDING_CAPITAL;
*TA_PM_TOTAL_NET_PROFIT = *Finance::TAc::TA_PM_TOTAL_NET_PROFIT;
*TA_PM_PROFIT_FACTOR = *Finance::TAc::TA_PM_PROFIT_FACTOR;
*TA_PM_PERCENT_PROFITABLE = *Finance::TAc::TA_PM_PERCENT_PROFITABLE;
*TA_PM_RATE_OF_RETURN = *Finance::TAc::TA_PM_RATE_OF_RETURN;
*TA_PM_ANNUALIZED_RETURN = *Finance::TAc::TA_PM_ANNUALIZED_RETURN;
*TA_PM_ANNUALIZED_COMPOUNDED_RETURN = *Finance::TAc::TA_PM_ANNUALIZED_COMPOUNDED_RETURN;
*TA_PM_NB_WINNING_TRADE = *Finance::TAc::TA_PM_NB_WINNING_TRADE;
*TA_PM_GROSS_PROFIT = *Finance::TAc::TA_PM_GROSS_PROFIT;
*TA_PM_AVG_PROFIT = *Finance::TAc::TA_PM_AVG_PROFIT;
*TA_PM_AVG_PROFIT_PERCENT = *Finance::TAc::TA_PM_AVG_PROFIT_PERCENT;
*TA_PM_LARGEST_PROFIT = *Finance::TAc::TA_PM_LARGEST_PROFIT;
*TA_PM_LARGEST_PROFIT_PERCENT = *Finance::TAc::TA_PM_LARGEST_PROFIT_PERCENT;
*TA_PM_NB_LOSING_TRADE = *Finance::TAc::TA_PM_NB_LOSING_TRADE;
*TA_PM_GROSS_LOSS = *Finance::TAc::TA_PM_GROSS_LOSS;
*TA_PM_AVG_LOSS = *Finance::TAc::TA_PM_AVG_LOSS;
*TA_PM_AVG_LOSS_PERCENT = *Finance::TAc::TA_PM_AVG_LOSS_PERCENT;
*TA_PM_LARGEST_LOSS = *Finance::TAc::TA_PM_LARGEST_LOSS;
*TA_PM_LARGEST_LOSS_PERCENT = *Finance::TAc::TA_PM_LARGEST_LOSS_PERCENT;
*TA_PM_NB_VALUEID = *Finance::TAc::TA_PM_NB_VALUEID;
*TA_PMSTRING_ERROR = *Finance::TAc::TA_PMSTRING_ERROR;
*TA_PM_VALUE_ID_IS_CURRENCY = *Finance::TAc::TA_PM_VALUE_ID_IS_CURRENCY;
*TA_PM_VALUE_ID_IS_PERCENT = *Finance::TAc::TA_PM_VALUE_ID_IS_PERCENT;
*TA_PM_VALUE_ID_IS_INTEGER = *Finance::TAc::TA_PM_VALUE_ID_IS_INTEGER;
*TA_PM_VALUE_ID_GENERAL = *Finance::TAc::TA_PM_VALUE_ID_GENERAL;
*TA_PM_VALUE_ID_LOSING_RELATED = *Finance::TAc::TA_PM_VALUE_ID_LOSING_RELATED;
*TA_PM_VALUE_ID_WINNING_RELATED = *Finance::TAc::TA_PM_VALUE_ID_WINNING_RELATED;
*TA_PM_VALUE_ID_NOT_RECOMMENDED = *Finance::TAc::TA_PM_VALUE_ID_NOT_RECOMMENDED;
*TA_PM_ARRAY_EQUITY = *Finance::TAc::TA_PM_ARRAY_EQUITY;
*TA_PM_NB_ARRAYID = *Finance::TAc::TA_PM_NB_ARRAYID;
*TA_FUNC_FLG_OVERLAP = *Finance::TAc::TA_FUNC_FLG_OVERLAP;
*TA_FUNC_FLG_INDICATOR = *Finance::TAc::TA_FUNC_FLG_INDICATOR;
*TA_FUNC_FLG_VOLUME = *Finance::TAc::TA_FUNC_FLG_VOLUME;
*TA_FUNC_FLG_UNST_PER = *Finance::TAc::TA_FUNC_FLG_UNST_PER;
*TA_FUNC_FLG_CANDLESTICK = *Finance::TAc::TA_FUNC_FLG_CANDLESTICK;
*TA_Input_Price = *Finance::TAc::TA_Input_Price;
*TA_Input_Real = *Finance::TAc::TA_Input_Real;
*TA_Input_Integer = *Finance::TAc::TA_Input_Integer;
*TA_OptInput_RealRange = *Finance::TAc::TA_OptInput_RealRange;
*TA_OptInput_RealList = *Finance::TAc::TA_OptInput_RealList;
*TA_OptInput_IntegerRange = *Finance::TAc::TA_OptInput_IntegerRange;
*TA_OptInput_IntegerList = *Finance::TAc::TA_OptInput_IntegerList;
*TA_Output_Real = *Finance::TAc::TA_Output_Real;
*TA_Output_Integer = *Finance::TAc::TA_Output_Integer;
*TA_IN_PRICE_OPEN = *Finance::TAc::TA_IN_PRICE_OPEN;
*TA_IN_PRICE_HIGH = *Finance::TAc::TA_IN_PRICE_HIGH;
*TA_IN_PRICE_LOW = *Finance::TAc::TA_IN_PRICE_LOW;
*TA_IN_PRICE_CLOSE = *Finance::TAc::TA_IN_PRICE_CLOSE;
*TA_IN_PRICE_VOLUME = *Finance::TAc::TA_IN_PRICE_VOLUME;
*TA_IN_PRICE_OPENINTEREST = *Finance::TAc::TA_IN_PRICE_OPENINTEREST;
*TA_IN_PRICE_TIMESTAMP = *Finance::TAc::TA_IN_PRICE_TIMESTAMP;
*TA_OPTIN_IS_PERCENT = *Finance::TAc::TA_OPTIN_IS_PERCENT;
*TA_OPTIN_IS_DEGREE = *Finance::TAc::TA_OPTIN_IS_DEGREE;
*TA_OPTIN_IS_CURRENCY = *Finance::TAc::TA_OPTIN_IS_CURRENCY;
*TA_OPTIN_ADVANCED = *Finance::TAc::TA_OPTIN_ADVANCED;
*TA_OUT_LINE = *Finance::TAc::TA_OUT_LINE;
*TA_OUT_DOT_LINE = *Finance::TAc::TA_OUT_DOT_LINE;
*TA_OUT_DASH_LINE = *Finance::TAc::TA_OUT_DASH_LINE;
*TA_OUT_DOT = *Finance::TAc::TA_OUT_DOT;
*TA_OUT_HISTO = *Finance::TAc::TA_OUT_HISTO;
*TA_OUT_THIN_LINE = *Finance::TAc::TA_OUT_THIN_LINE;
*TA_OUT_NORM_LINE = *Finance::TAc::TA_OUT_NORM_LINE;
*TA_OUT_THICK_LINE = *Finance::TAc::TA_OUT_THICK_LINE;
1;
# This perl snippet is appended to the perl module generated by SWIG
# customizing and extending its functionality

package Finance::TA;

use strict;

our $VERSION = v0.1.3;

package Finance::TA::TA_Timestamp;

# Redefine &new to a friendler version accepting optional parameters
undef *new;

*new = sub {
    my $pkg = shift;
    my $self = ::Finance::TAc::new_TA_Timestamp();
    if (defined $self) {
        bless $self, $pkg;

        # Handle optional parameters
        if (@_ > 1) {
            ::Finance::TAc::TA_SetDate(@_[0..2], $self);
        }
        if (@_ > 3) {
            ::Finance::TAc::TA_SetTime(@_[3..5], $self);
        }
        if (@_ == 1) { # like: "2004-02-28 15:37:55"
            if ($_[0] =~ /(\d{2,4})-(\d{2})-(\d{2})/) {
                ::Finance::TAc::TA_SetDate($1, $2, $3, $self);
            }
            if ($_[0] =~ /(\d{2}):(\d{2}):(\d{2})/) {
                ::Finance::TAc::TA_SetTime($1, $2, $3, $self);
            }
        }
    }
    return $self;
};


sub GetStringDate {
    my ($self) = @_;
    my @res = ::Finance::TAc::TA_GetDate($self);
    return sprintf("%04d-%02d-%02d", @res[1..3]);
}


sub GetStringTime {
    my ($self) = @_;
    my @res = ::Finance::TAc::TA_GetTime($self);
    return sprintf("%02d:%02d:%02d", @res[1..3]);
}


sub GetStringTimestamp {
    my ($self) = @_;
    return GetStringDate($self) . " " . GetStringTime($self);
}


package Finance::TA::TA_RetCodeInfo;

# Redefine &new to a friendler version accepting an optional parameter
undef *new;

*new = sub {
    my ($pkg, $code) = @_;
    my $self = ::Finance::TAc::new_TA_RetCodeInfo();
    bless $self, $pkg if defined($self);
    ::Finance::TA::TA_SetRetCodeInfo($code, $self) if defined($code) && defined($self);
    return $self;
};


package Finance::TA::TA_UDBase;

# Wrapper class for TA_UDBase, handling allocation deallocation automatically,
# and providing object-oriented interface

sub new {
    my $pkg = shift;
    my $self;
    my $retCode = ::Finance::TAc::TA_UDBaseAlloc(\$self);
    if (defined $self) {
        bless $self, $pkg;
        ACQUIRE($self);
    }
    return $self;
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    delete $ITERATORS{$self} if defined %ITERATORS;
    if (defined %OWNER && exists $OWNER{$self}) {
        delete $OWNER{$self};
        ::Finance::TAc::TA_UDBaseFree($self);
    }
}

sub AddDataSource {
    my ($self, $param) = @_;
    if (ref($param) eq 'HASH') {
        my $hash = $param;
        $param = Finance::TA::TA_AddDataSourceParam->new;
        while ( my($key, $val) = each(%$hash) ) {
            $param->{$key} = $val;
        }
    }
    ::Finance::TAc::TA_AddDataSource($self, $param);
}

sub History {
    my ($self, $param) = @_;
    Finance::TA::TA_History->new($self, $param);
}

sub CategoryTable {
    my $self = shift;
    my @table = ::Finance::TAc::TA_CategoryTable($self);
    if (shift(@table) == $Finance::TA::TA_SUCCESS) {
        return @table;
    } else {
        return;
    }
}

sub SymbolTable {
    my ($self, $symbol) = @_;
    $symbol ||= $Finance::TA::TA_DEFAULT_CATEGORY;
    my @table = ::Finance::TAc::TA_SymbolTable($self, $symbol);
    if (shift(@table) == $Finance::TA::TA_SUCCESS) {
        return @table;
    } else {
        return;
    }
}




package Finance::TA::TA_History;

# Wrapper classes arrange access to TA_History members but creation/deletion
# should be done differently.  Instead of doing new_ and delete_ (which
# use malloc/free), TA_HistoryAlloc and TA_HistoryFree has to be used.

sub new {
    my ($pkg, $udb, $param) = @_;
    if (ref($param) eq 'HASH') { # accept plain hash as HistoryAllocParam
        my $hash = $param;
        $param = Finance::TA::TA_HistoryAllocParam->new;
        while ( my($key, $val) = each(%$hash) ) {
            $param->{$key} = $val;
        }
    }
    my @res = ::Finance::TAc::TA_HistoryAlloc($udb, $param);
    if($res[0] == $Finance::TA::TA_SUCCESS && defined($res[1])) {
        my $self = $res[1];
        return bless $self, $pkg;
    } else {
        my %hash;
        $hash{retCode} = $res[0];
        return \%hash;  # not blessed!
    }
}

*swig_retCode_get = sub { $::Finance::TA::TA_SUCCESS };

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self} if defined %ITERATORS;
    if (defined %OWNER && exists $OWNER{$self}) {
        delete $OWNER{$self};
        ::Finance::TAc::TA_HistoryFree($self);
    }
}

# Now prevent accidental direct calls to TA_HistoryAllow/TA_HistoryFree
delete $::Finance::TA::{TA_HistoryAlloc};
delete $::Finance::TA::{TA_HistoryFree};



package Finance::TA::TA_FuncHandle;

sub new {
    my ($pkg, $name) = @_;
    my $self;
    my $retCode = ::Finance::TAc::TA_GetFuncHandle($name, \$self);
    if (defined $self) {
        bless $self, $pkg;
    }
    return $self;
}


sub GetFuncInfo {
    my ($self) = @_;
    my $info;
    my $retCode = ::Finance::TAc::TA_GetFuncInfo($self, \$info);
    return $info;
}


sub GetInputParameterInfo {
    my ($self, $param) = @_;
    my $info;
    my $retCode = ::Finance::TAc::TA_GetInputParameterInfo($self, $param, \$info);
    return $info;
}


sub GetOutputParameterInfo {
    my ($self, $param) = @_;
    my $info;
    my $retCode = ::Finance::TAc::TA_GetOutputParameterInfo($self, $param, \$info);
    return $info;
}


sub GetOptInputParameterInfo {
    my ($self, $param) = @_;
    my $info;
    my $retCode = ::Finance::TAc::TA_GetOptInputParameterInfo($self, $param, \$info);
    return $info;
}



package Finance::TA::TA_FuncInfo;

sub new {
    my ($pkg, $handle) = @_;
    my $self;
    my $retCode = ::Finance::TAc::TA_GetFuncInfo($handle, \$self);
    if (defined $self) {
        bless $self, $pkg;
    }
    return $self;
}


package Finance::TA::TA_TradeLog;

# Wrapper class for TA_TradeLog, handling allocation deallocation automatically,
# and providing object-oriented interface

sub new {
    my $pkg = shift;
    my $self;
    my $retCode = ::Finance::TAc::TA_TradeLogAlloc(\$self);
    if (defined $self) {
        bless $self, $pkg;
        ACQUIRE($self);
    }
    #print "creating $self\n";
    return $self;
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    #print "destroying $_[0]\n";
    my $self = tied(%{$_[0]});
    delete $ITERATORS{$self} if defined %ITERATORS;
    if (defined %OWNER && exists $OWNER{$self}) {
        delete $OWNER{$self};
        ::Finance::TAc::TA_TradeLogFree($self);
    }
}

sub TradeLogAdd {
    my ($self, $param) = @_;
    if (ref($param) eq 'HASH') {
        my $hash = $param;
        $param = Finance::TA::TA_Transaction->new;
        while ( my($key, $val) = each(%$hash) ) {
            $param->{$key} = $val;
        }
    }
    ::Finance::TAc::TA_TradeLogAdd($self, $param);
}


package Finance::TA::TA_PM;

# Wrapper class for TA_PM, handling allocation deallocation automatically,
# and providing object-oriented interface

# Keep track which logs are added to PM, not to destroy them too early
our %LOGS = ();

sub new {
    my $pkg = shift;
    my $self;
    my $retCode = ::Finance::TAc::TA_PMAlloc(@_[0..2], \$self);
    if (defined $self) {
        bless $self, $pkg;
        ACQUIRE($self);
    }
    #print "creating $self\n";
    return $self;
}

sub DESTROY {
    my ($self) = @_;
    return unless $self->isa('HASH');
    #print "destroying $self\n";
    my $this = tied(%$self);
    delete $ITERATORS{$this} if defined %ITERATORS;
    if (defined %OWNER && exists $OWNER{$this}) {
        delete $OWNER{$this};
        ::Finance::TAc::TA_PMFree($this);
    }
    delete $LOGS{$self} if defined %LOGS;
}

sub PMAddTradeLog {
    my ($self, $log) = @_;
    push(@{$LOGS{$self}}, $log);
    ::Finance::TAc::TA_PMAddTradeLog($self, $log);
}

sub PMValue {
    my @res = ::Finance::TAc::TA_PMValue(@_);
    return ($res[0] == $Finance::TA::TA_SUCCESS)? $res[1] : undef;
}

sub PMArray {
    return unless $_[0]->isa('HASH');
    return Finance::TA::TA_PMArray->new(@_);
}

sub TradeReport {
    return unless $_[0]->isa('HASH');
    return Finance::TA::TA_TradeReport->new(@_);
}


package Finance::TA::TA_PMArray;

# Wrapper classes arrange access to TA_PMArray, similarly to TA_History

sub new {
    #print "alloc PMArray: @_\n";
    my $pkg = shift;
    my $self;
    my @res = ::Finance::TAc::TA_PMArrayAlloc(@_);
    if($res[0] == $::Finance::TA::TA_SUCCESS && defined($res[1])) {
        $self = $res[1];
        return bless $self, $pkg;
    } else {
        my %hash;
        $hash{retCode} = $res[0];
        return \%hash;  # not blessed!
    }
}

*swig_retCode_get = sub { $::Finance::TA::TA_SUCCESS };

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $this = tied(%{$_[0]});
    return unless defined $this;
    delete $ITERATORS{$this} if defined %ITERATORS;
    if (defined %OWNER && exists $OWNER{$this}) {
        delete $OWNER{$this};
        ::Finance::TAc::TA_PMArrayFree($this);
    }
}

# Now prevent accidental direct calls to TA_PMArrayAlloc/TA_PMArrayFree
delete $::Finance::TA::{TA_PMArrayAlloc};
delete $::Finance::TA::{TA_PMArrayFree};



package Finance::TA::TA_TradeReport;

# Wrapper classes arrange access to TA_TradeReport, similarly to TA_PMArray

# Keep track which PM is used for Trade Report, not to destroy it too early
# (design limitation of TA_TradeReport)

our %PM = ();

sub new {
    my ($pkg, $pm) = @_;
    my $self;
    my @res = ::Finance::TAc::TA_TradeReportAlloc($pm);
    if($res[0] == $::Finance::TA::TA_SUCCESS && defined($res[1])) {
        $self = $res[1];
        $PM{$self} = $pm;
        return bless $self, $pkg;
    } else {
        my %hash;
        $hash{retCode} = $res[0];
        return \%hash;  # not blessed!
    }
}

*swig_retCode_get = sub { $::Finance::TA::TA_SUCCESS };

sub DESTROY {
    my ($self) = @_;
    return unless $self->isa('HASH');
    my $this = tied(%$self);
    return unless defined $self;
    delete $ITERATORS{$this} if defined %ITERATORS;
    if (defined %OWNER && exists $OWNER{$this}) {
        delete $OWNER{$this};
        ::Finance::TAc::TA_TradeReportFree($this);
    }
    delete $PM{$self} if defined %PM;
}

# Now prevent accidental direct calls to TA_TradeReportAlloc/TA_TradeReportFree
delete $::Finance::TA::{TA_TradeReportAlloc};
delete $::Finance::TA::{TA_TradeReportFree};



package Finance::TA;

# Redefine exported TA_Initialize/TA_Shutdown functions 
# to be more "Perl-friendly"

our $INITIALIZED = 0;

undef *TA_Initialize;

*TA_Initialize = sub {
    my $retCode;
    if ($INITIALIZED) {
        $retCode = TA_Shutdown();
        return $retCode if $retCode != $Finance::TA::TA_SUCCESS;
    }
    # Accept calls with no parameters
    $_[0] = undef if @_ == 0;
    $retCode = ::Finance::TAc::TA_Initialize(@_);
    $INITIALIZED = ($retCode == $Finance::TA::TA_SUCCESS);
    return $retCode;
};

undef *TA_Shutdown;

*TA_Shutdown = sub {
    if ($INITIALIZED) {
        $INITIALIZED = 0;
        return ::Finance::TAc::TA_Shutdown();
    } else {
        # We are more forgiving on multiple calls to &TA_Shutdown
        # than TA-LIB on TA_Shutdown()
        return $Finance::TA::TA_SUCCESS;
    }
};

# SWIG does not export anything by default
# This small loop circumvents that and export everything beginning with 'TA_'
foreach (keys %Finance::TA::) {
    if (/^TA_/) {
        local *::sym = $Finance::TA::{$_};        
        push(@Finance::TA::EXPORT, "\$$_") if defined $::sym;
        push(@Finance::TA::EXPORT, "\@$_") if defined @::sym;
        push(@Finance::TA::EXPORT, "\%$_") if defined %::sym;
        push(@Finance::TA::EXPORT, $_) if defined &::sym;
    }
}

END { TA_Shutdown() }

TA_Initialize();
$INITIALIZED;
